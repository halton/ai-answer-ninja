apiVersion: v1
kind: Namespace
metadata:
  name: ai-ninja-monitoring
  labels:
    name: ai-ninja-monitoring
    environment: production
---
# ==========================================
# ConfigMaps
# ==========================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: ai-ninja-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'ai-ninja-production'
        environment: 'production'

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - ai-ninja
                - ai-ninja-monitoring
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
          - role: service
            namespaces:
              names:
                - ai-ninja
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_service_name

  alert-rules.yml: |
    groups:
      - name: kubernetes-resources
        rules:
          - alert: KubernetesPodCrashLooping
            expr: increase(kube_pod_container_status_restarts_total{namespace="ai-ninja"}[15m]) > 0
            for: 0m
            labels:
              severity: critical
            annotations:
              summary: "Pod {{ $labels.pod }} is crash looping"

          - alert: KubernetesDeploymentReplicasMismatch
            expr: |
              (
                kube_deployment_spec_replicas{namespace="ai-ninja"}
                !=
                kube_deployment_status_replicas_available{namespace="ai-ninja"}
              ) and (
                changes(kube_deployment_status_replicas_updated{namespace="ai-ninja"}[10m])
                ==
                0
              )
            for: 15m
            labels:
              severity: warning
            annotations:
              summary: "Deployment {{ $labels.deployment }} has mismatched replicas"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: ai-ninja-monitoring
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'alerts@company.com'
      slack_api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'

    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 24h
      receiver: 'web.hook'
      routes:
        - match:
            severity: critical
          receiver: 'critical-alerts'
          group_wait: 10s
          repeat_interval: 5m

    receivers:
      - name: 'web.hook'
        webhook_configs:
          - url: 'http://monitoring-service:3009/api/alerts/webhook'
            send_resolved: true

      - name: 'critical-alerts'
        slack_configs:
          - channel: '#ai-ninja-alerts'
            color: danger
            title: 'ðŸš¨ CRITICAL Alert'
            text: |
              *Alert:* {{ .GroupLabels.alertname }}
              *Service:* {{ .GroupLabels.service }}
              {{ range .Alerts }}
              *Summary:* {{ .Annotations.summary }}
              {{ end }}

---
# ==========================================
# Storage
# ==========================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: ai-ninja-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: ai-ninja-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-storage
  namespace: ai-ninja-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
# ==========================================
# Deployments
# ==========================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: ai-ninja-monitoring
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--storage.tsdb.retention.time=30d'
          - '--storage.tsdb.retention.size=45GB'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--web.enable-lifecycle'
          - '--web.external-url=https://monitoring.ai-ninja.com/prometheus'
          - '--web.route-prefix=/prometheus'
        ports:
        - containerPort: 9090
          protocol: TCP
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        - name: storage-volume
          mountPath: /prometheus
        livenessProbe:
          httpGet:
            path: /prometheus/-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /prometheus/-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 5
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
      - name: storage-volume
        persistentVolumeClaim:
          claimName: prometheus-storage
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: ai-ninja-monitoring
  labels:
    app: alertmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9093"
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.25.0
        args:
          - '--config.file=/etc/alertmanager/alertmanager.yml'
          - '--storage.path=/alertmanager'
          - '--web.external-url=https://monitoring.ai-ninja.com/alertmanager'
          - '--web.route-prefix=/alertmanager'
        ports:
        - containerPort: 9093
          protocol: TCP
        volumeMounts:
        - name: config-volume
          mountPath: /etc/alertmanager
        - name: storage-volume
          mountPath: /alertmanager
        livenessProbe:
          httpGet:
            path: /alertmanager/-/healthy
            port: 9093
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /alertmanager/-/ready
            port: 9093
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: config-volume
        configMap:
          name: alertmanager-config
      - name: storage-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: ai-ninja-monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.3
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_SERVER_ROOT_URL
          value: "https://monitoring.ai-ninja.com/grafana"
        - name: GF_SERVER_SERVE_FROM_SUB_PATH
          value: "true"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        ports:
        - containerPort: 3000
          protocol: TCP
        volumeMounts:
        - name: storage-volume
          mountPath: /var/lib/grafana
        - name: datasources-volume
          mountPath: /etc/grafana/provisioning/datasources
        - name: dashboards-volume
          mountPath: /etc/grafana/provisioning/dashboards
        livenessProbe:
          httpGet:
            path: /grafana/api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /grafana/api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: storage-volume
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: datasources-volume
        configMap:
          name: grafana-datasources
      - name: dashboards-volume
        configMap:
          name: grafana-dashboards
      securityContext:
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-service
  namespace: ai-ninja-monitoring
  labels:
    app: monitoring-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: monitoring-service
  template:
    metadata:
      labels:
        app: monitoring-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3009"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: monitoring-service
        image: ai-ninja/monitoring-service:latest
        ports:
        - containerPort: 3009
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3009"
        - name: DB_HOST
          value: "postgres.ai-ninja.svc.cluster.local"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "ai_ninja"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: db-password
        - name: REDIS_HOST
          value: "redis.ai-ninja.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: PROMETHEUS_URL
          value: "http://prometheus:9090"
        - name: GRAFANA_URL
          value: "http://grafana:3000"
        livenessProbe:
          httpGet:
            path: /health
            port: 3009
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3009
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: logs-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: ai-ninja-monitoring
  labels:
    app: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
        env:
        - name: discovery.type
          value: "single-node"
        - name: xpack.security.enabled
          value: "false"
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        - name: bootstrap.memory_lock
          value: "true"
        ports:
        - containerPort: 9200
          protocol: TCP
        - containerPort: 9300
          protocol: TCP
        volumeMounts:
        - name: storage-volume
          mountPath: /usr/share/elasticsearch/data
        livenessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /_cluster/health?wait_for_status=yellow
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        securityContext:
          capabilities:
            add:
            - IPC_LOCK
      volumes:
      - name: storage-volume
        persistentVolumeClaim:
          claimName: elasticsearch-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: ai-ninja-monitoring
  labels:
    app: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
    spec:
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:1.47.0
        env:
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: SPAN_STORAGE_TYPE
          value: "elasticsearch"
        - name: ES_SERVER_URLS
          value: "http://elasticsearch:9200"
        ports:
        - containerPort: 16686
          protocol: TCP
        - containerPort: 14268
          protocol: TCP
        - containerPort: 14250
          protocol: TCP
        - containerPort: 6831
          protocol: UDP
        livenessProbe:
          httpGet:
            path: /
            port: 16686
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 16686
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
---
# ==========================================
# Services
# ==========================================
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: ai-ninja-monitoring
  labels:
    app: prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  selector:
    app: prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: ai-ninja-monitoring
  labels:
    app: alertmanager
spec:
  type: ClusterIP
  ports:
  - port: 9093
    targetPort: 9093
    protocol: TCP
    name: web
  selector:
    app: alertmanager
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: ai-ninja-monitoring
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: web
  selector:
    app: grafana
---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-service
  namespace: ai-ninja-monitoring
  labels:
    app: monitoring-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3009"
spec:
  type: ClusterIP
  ports:
  - port: 3009
    targetPort: 3009
    protocol: TCP
    name: http
  selector:
    app: monitoring-service
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: ai-ninja-monitoring
  labels:
    app: elasticsearch
spec:
  type: ClusterIP
  ports:
  - port: 9200
    targetPort: 9200
    protocol: TCP
    name: http
  - port: 9300
    targetPort: 9300
    protocol: TCP
    name: transport
  selector:
    app: elasticsearch
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: ai-ninja-monitoring
  labels:
    app: jaeger
spec:
  type: ClusterIP
  ports:
  - port: 16686
    targetPort: 16686
    protocol: TCP
    name: ui
  - port: 14268
    targetPort: 14268
    protocol: TCP
    name: collector-http
  - port: 14250
    targetPort: 14250
    protocol: TCP
    name: collector-grpc
  - port: 6831
    targetPort: 6831
    protocol: UDP
    name: collector-udp
  selector:
    app: jaeger
---
# ==========================================
# ServiceAccount and RBAC
# ==========================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: ai-ninja-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: ai-ninja-monitoring
---
# ==========================================
# Ingress
# ==========================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress
  namespace: ai-ninja-monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^(/monitoring)$ $1/ redirect;
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - monitoring.ai-ninja.com
    secretName: monitoring-tls
  rules:
  - host: monitoring.ai-ninja.com
    http:
      paths:
      - path: /grafana(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
      - path: /prometheus(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
      - path: /alertmanager(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: alertmanager
            port:
              number: 9093
      - path: /jaeger(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: jaeger
            port:
              number: 16686
      - path: /api(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: monitoring-service
            port:
              number: 3009
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
---
# ==========================================
# HorizontalPodAutoscaler
# ==========================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: monitoring-service-hpa
  namespace: ai-ninja-monitoring
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: monitoring-service
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
# ==========================================
# PodDisruptionBudget
# ==========================================
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: monitoring-service-pdb
  namespace: ai-ninja-monitoring
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: monitoring-service
---
# ==========================================
# NetworkPolicy
# ==========================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-network-policy
  namespace: ai-ninja-monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ai-ninja
    - namespaceSelector:
        matchLabels:
          name: ai-ninja-monitoring
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: ai-ninja
  - to:
    - namespaceSelector:
        matchLabels:
          name: ai-ninja-monitoring
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80