# Production Services Configuration
# Load balancing and service discovery for core services

---
# User Management Service
apiVersion: v1
kind: Service
metadata:
  name: user-management-service
  namespace: ai-ninja
  labels:
    app: user-management
    tier: core
    component: user-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    prometheus.io/scrape: "true"
    prometheus.io/port: "3005"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: user-management
    version: v1
  ports:
  - name: http
    port: 3005
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP

---
# Smart Whitelist Service
apiVersion: v1
kind: Service
metadata:
  name: smart-whitelist-service
  namespace: ai-ninja
  labels:
    app: smart-whitelist
    tier: core
    component: whitelist-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3006"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: smart-whitelist
    version: v1
  ports:
  - name: http
    port: 3006
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9091
    targetPort: metrics
    protocol: TCP

---
# Realtime Processor Service (Critical)
apiVersion: v1
kind: Service
metadata:
  name: realtime-processor-service
  namespace: ai-ninja
  labels:
    app: realtime-processor
    tier: core
    component: realtime-service
    priority: critical
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3002"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold: "3"
spec:
  type: ClusterIP
  sessionAffinity: ClientIP  # Sticky sessions for WebSocket connections
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600  # 1 hour session timeout
  selector:
    app: realtime-processor
    version: v1
  ports:
  - name: http
    port: 3002
    targetPort: http
    protocol: TCP
  - name: websocket
    port: 8080
    targetPort: websocket
    protocol: TCP
  - name: metrics
    port: 9092
    targetPort: metrics
    protocol: TCP

---
# Realtime Processor Headless Service (for WebSocket direct connections)
apiVersion: v1
kind: Service
metadata:
  name: realtime-processor-headless
  namespace: ai-ninja
  labels:
    app: realtime-processor
    tier: core
    component: realtime-service
    service-type: headless
spec:
  type: ClusterIP
  clusterIP: None
  sessionAffinity: None
  selector:
    app: realtime-processor
    version: v1
  ports:
  - name: websocket
    port: 8080
    targetPort: websocket
    protocol: TCP

---
# Conversation Engine Service
apiVersion: v1
kind: Service
metadata:
  name: conversation-engine-service
  namespace: ai-ninja
  labels:
    app: conversation-engine
    tier: core
    component: ai-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3003"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: conversation-engine
    version: v1
  ports:
  - name: http
    port: 3003
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9093
    targetPort: metrics
    protocol: TCP

---
# Profile Analytics Service
apiVersion: v1
kind: Service
metadata:
  name: profile-analytics-service
  namespace: ai-ninja
  labels:
    app: profile-analytics
    tier: core
    component: analytics-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3004"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: profile-analytics
    version: v1
  ports:
  - name: http
    port: 3004
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9094
    targetPort: metrics
    protocol: TCP

---
# Conversation Analyzer Service
apiVersion: v1
kind: Service
metadata:
  name: conversation-analyzer-service
  namespace: ai-ninja
  labels:
    app: conversation-analyzer
    tier: core
    component: analyzer-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3007"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: conversation-analyzer
    version: v1
  ports:
  - name: http
    port: 3007
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9095
    targetPort: metrics
    protocol: TCP

---
# API Gateway Service (External facing)
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: ai-ninja
  labels:
    app: api-gateway
    tier: gateway
    component: ingress
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: /health
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "80"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:ACCOUNT:certificate/CERTIFICATE_ID
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    external-dns.alpha.kubernetes.io/hostname: api.ai-ninja.com
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0  # Restrict this in production
  selector:
    app: nginx-ingress-controller
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 80
    protocol: TCP
  - name: websocket
    port: 8080
    targetPort: 8080
    protocol: TCP

---
# WebSocket Load Balancer Service (for realtime connections)
apiVersion: v1
kind: Service
metadata:
  name: websocket-service
  namespace: ai-ninja
  labels:
    app: websocket-lb
    tier: gateway
    component: websocket
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"
    external-dns.alpha.kubernetes.io/hostname: ws.ai-ninja.com
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600
  selector:
    app: realtime-processor
    version: v1
  ports:
  - name: websocket
    port: 8080
    targetPort: websocket
    protocol: TCP

---
# Internal DNS Service for Service Discovery
apiVersion: v1
kind: Service
metadata:
  name: internal-dns
  namespace: ai-ninja
  labels:
    app: internal-dns
    tier: infrastructure
    component: service-discovery
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP