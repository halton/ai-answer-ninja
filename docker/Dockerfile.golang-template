# Multi-stage Go Dockerfile Template
# Optimized for security, performance, and minimal image size

# Build stage
FROM golang:1.21-alpine AS builder

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=latest
ARG TARGETOS=linux
ARG TARGETARCH=amd64

# Metadata labels
LABEL org.opencontainers.image.title="AI Ninja Go Service" \
      org.opencontainers.image.description="Go microservice for AI Phone Answering System" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.version=$VERSION \
      org.opencontainers.image.source="https://github.com/ai-ninja/ai-answer-ninja" \
      maintainer="AI Ninja Team"

# Install build dependencies
RUN apk update && apk add --no-cache \
    ca-certificates \
    git \
    gcc \
    musl-dev \
    tzdata && \
    rm -rf /var/cache/apk/*

# Create app directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies with cache mount for better performance
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download && \
    go mod verify

# Copy source code
COPY . .

# Build the application with optimizations
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    CGO_ENABLED=0 \
    GOOS=${TARGETOS} \
    GOARCH=${TARGETARCH} \
    go build \
    -a \
    -installsuffix cgo \
    -ldflags="-w -s -extldflags '-static' \
    -X main.version=${VERSION} \
    -X main.buildDate=${BUILD_DATE} \
    -X main.gitCommit=${VCS_REF}" \
    -o bin/app \
    ./cmd/main.go

# Verify the binary
RUN file bin/app && \
    ls -la bin/app

# Production stage - using distroless for security
FROM gcr.io/distroless/static:nonroot AS production

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy CA certificates
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the binary from builder stage
COPY --from=builder /app/bin/app /app

# Copy configuration files if needed
COPY --from=builder /app/config /config

# Use non-root user (distroless default)
USER nonroot:nonroot

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD ["/app", "-health-check"]

# Environment variables
ENV GIN_MODE=release \
    PORT=8080 \
    GOGC=100 \
    GOMAXPROCS=0

# Start the application
ENTRYPOINT ["/app"]
CMD ["-server"]

# Development stage
FROM golang:1.21-alpine AS development

# Install development tools
RUN apk update && apk add --no-cache \
    ca-certificates \
    git \
    curl \
    bash \
    make \
    gcc \
    musl-dev \
    vim \
    htop && \
    rm -rf /var/cache/apk/*

# Install development tools
RUN go install github.com/cosmtrek/air@latest && \
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest && \
    go install github.com/securecodewarrior/goat@latest

WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Install dependencies including dev dependencies
RUN go mod download

# Copy source code
COPY . .

# Set development environment
ENV GIN_MODE=debug \
    CGO_ENABLED=1 \
    GOOS=linux

EXPOSE 8080

# Hot reload command
CMD ["air", "-c", ".air.toml"]

# Testing stage
FROM development AS testing

# Install testing tools
RUN go install github.com/onsi/ginkgo/v2/ginkgo@latest && \
    go install github.com/onsi/gomega/...@latest && \
    go install github.com/axw/gocov/gocov@latest

# Run tests and quality checks
RUN go fmt ./... && \
    go vet ./... && \
    golangci-lint run ./... && \
    go test -v -race -coverprofile=coverage.out ./... && \
    go tool cover -html=coverage.out -o coverage.html

# Security scanning stage
FROM alpine:latest AS security-scan

# Install security tools
RUN apk add --no-cache curl && \
    curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b /usr/local/bin

COPY --from=builder /app /app

WORKDIR /app

# Run security scans
RUN gosec -severity medium ./...

# Benchmark stage
FROM testing AS benchmark

# Run benchmarks
RUN go test -bench=. -benchmem ./...

# Profiling stage for performance analysis
FROM development AS profiling

# Install profiling tools
RUN go install github.com/google/pprof@latest

# Copy built binary for profiling
COPY --from=builder /app/bin/app /app/bin/app

# Expose profiling port
EXPOSE 6060

# Start with profiling enabled
CMD ["/app/bin/app", "-server", "-profile"]

# Minimal production stage with debug symbols removed
FROM scratch AS production-minimal

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy CA certificates
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy only the binary
COPY --from=builder /app/bin/app /app

# Copy minimal config if needed
COPY --from=builder /app/config/production.yml /config/config.yml

# Use nobody user (UID 65534)
USER 65534

EXPOSE 8080

# Minimal health check
HEALTHCHECK --interval=60s --timeout=5s --start-period=30s --retries=2 \
    CMD ["/app", "-health-check"]

# Start the application
ENTRYPOINT ["/app"]
CMD ["-server"]

# Debug stage for troubleshooting
FROM alpine:latest AS debug

# Install debugging tools
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    bash \
    curl \
    strace \
    tcpdump \
    netcat-openbsd && \
    rm -rf /var/cache/apk/*

# Copy binary from builder
COPY --from=builder /app/bin/app /app/bin/app
COPY --from=builder /app/config /app/config

# Create non-root user
RUN adduser -D -s /bin/bash appuser

USER appuser

WORKDIR /app

EXPOSE 8080

# Start with debugging options
CMD ["./bin/app", "-server", "-debug"]