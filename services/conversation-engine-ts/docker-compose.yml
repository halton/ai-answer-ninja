
services:
  conversation-engine:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        GIT_COMMIT: ${GIT_COMMIT:-unknown}
        VERSION: ${VERSION:-1.0.0}
    image: ai-ninja/conversation-engine:${TAG:-latest}
    container_name: conversation-engine
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3003
      - SERVICE_NAME=conversation-engine
      
      # Azure OpenAI 配置
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2023-12-01-preview}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME:-gpt-4}
      
      # 数据库配置
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@postgres:5432/ai_ninja}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      
      # 性能配置
      - MAX_CONVERSATION_TURNS=${MAX_CONVERSATION_TURNS:-10}
      - MAX_RESPONSE_LENGTH=${MAX_RESPONSE_LENGTH:-200}
      - INTENT_CONFIDENCE_THRESHOLD=${INTENT_CONFIDENCE_THRESHOLD:-0.7}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - RESPONSE_CACHE_TTL=${RESPONSE_CACHE_TTL:-1800}
      
      # 日志配置
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - ENABLE_REQUEST_LOGGING=${ENABLE_REQUEST_LOGGING:-true}
      
      # 监控配置
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30000}
    
    volumes:
      - ./logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    
    depends_on:
      - redis
      - postgres
    
    networks:
      - ai-ninja-network
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health/liveness', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "5"

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: conversation-engine-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ai-ninja-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: conversation-engine-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ai_ninja}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ai-ninja-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ai_ninja}"]
      interval: 30s
      timeout: 5s
      retries: 3

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: conversation-engine-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - ai-ninja-network
    profiles:
      - monitoring

  # Grafana 可视化（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: conversation-engine-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - ai-ninja-network
    profiles:
      - monitoring

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  ai-ninja-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16