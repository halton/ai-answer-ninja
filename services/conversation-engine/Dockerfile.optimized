# =============================================================================
# Conversation Engine Service - Optimized Production Dockerfile
# Handles AI conversation management, sentiment analysis, and Azure OpenAI integration
# =============================================================================

# Build stage
FROM python:3.11.6-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    openssl-dev \
    cargo \
    rust \
    git \
    make \
    g++ \
    postgresql-dev

WORKDIR /app

# Copy requirements first for better layer caching
COPY requirements.txt pyproject.toml ./

# Create virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install dependencies
RUN pip install --upgrade pip setuptools wheel \
    && pip install --no-cache-dir -r requirements.txt

# Copy source code
COPY . .

# Install the application if setup.py exists
RUN if [ -f "setup.py" ]; then pip install -e .; fi

# Production stage
FROM python:3.11.6-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    tini \
    curl \
    ca-certificates \
    libpq \
    libffi \
    openssl \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory and permissions
WORKDIR /app
RUN chown -R appuser:appuser /app

# Copy application code
COPY --chown=appuser:appuser app/ ./app/
COPY --chown=appuser:appuser main.py ./
COPY --chown=appuser:appuser services/ ./services/
COPY --chown=appuser:appuser models/ ./models/
COPY --chown=appuser:appuser config/ ./config/ 2>/dev/null || true

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONPATH=/app
ENV PORT=3003

# Create necessary directories
RUN mkdir -p /app/logs /app/temp /app/ml/models /app/cache && \
    chown -R appuser:appuser /app/logs /app/temp /app/ml /app/cache

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3003

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
    CMD curl -f http://localhost:3003/health || exit 1

# Use tini for proper signal handling
ENTRYPOINT ["tini", "--"]

# Start the application with uvicorn for better performance
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "3003", "--workers", "2"]

# Metadata
LABEL maintainer="AI Answer Ninja Team"
LABEL service="conversation-engine"
LABEL version="1.0.0"
LABEL description="AI Conversation Engine with sentiment analysis and Azure OpenAI integration"