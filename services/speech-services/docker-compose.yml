version: '3.8'

services:
  speech-services:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: speech-services
    restart: unless-stopped
    ports:
      - "3010:3010"  # HTTP API
      - "3011:3011"  # WebSocket
      - "3012:3012"  # Metrics
    environment:
      - NODE_ENV=production
      - SERVICE_PORT=3010
      - WS_PORT=3011
      - METRICS_PORT=3012
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - AZURE_SPEECH_REGION=${AZURE_SPEECH_REGION}
      - AZURE_SPEECH_ENDPOINT=${AZURE_SPEECH_ENDPOINT}
      - AZURE_CUSTOM_VOICE_ENDPOINT=${AZURE_CUSTOM_VOICE_ENDPOINT}
      - AZURE_CUSTOM_VOICE_PROJECT_ID=${AZURE_CUSTOM_VOICE_PROJECT_ID}
      - AZURE_CUSTOM_VOICE_DEPLOYMENT_ID=${AZURE_CUSTOM_VOICE_DEPLOYMENT_ID}
      - CACHE_TTL_SECONDS=3600
      - CACHE_MAX_SIZE=1000
      - MAX_CONCURRENT_STT=10
      - MAX_CONCURRENT_TTS=10
      - TARGET_STT_LATENCY=350
      - TARGET_TTS_LATENCY=300
      - TARGET_TOTAL_LATENCY=1500
    volumes:
      - ./logs:/app/logs
      - ./audio-cache:/app/audio-cache
    networks:
      - speech-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: speech-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - speech-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: speech-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - speech-network
    depends_on:
      - speech-services

  grafana:
    image: grafana/grafana:latest
    container_name: speech-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - speech-network
    depends_on:
      - prometheus

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  speech-network:
    driver: bridge