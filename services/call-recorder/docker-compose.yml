
services:
  call-recorder:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-ninja-call-recorder
    ports:
      - "3010:3010"
      - "9090:9090" # Prometheus metrics
    environment:
      NODE_ENV: development
      PORT: 3010
      HOST: 0.0.0.0
      
      # Storage Configuration
      STORAGE_PROVIDER: local
      LOCAL_UPLOAD_DIR: /app/uploads
      LOCAL_TEMP_DIR: /app/temp
      
      # Encryption
      MASTER_ENCRYPTION_KEY: ${MASTER_ENCRYPTION_KEY:-dGVzdF9lbmNyeXB0aW9uX2tleV8zMl9ieXRlc19sb25nXzEyMw==}
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ai_ninja
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-development_jwt_secret_change_in_production}
      
      # FFmpeg
      FFMPEG_PATH: /usr/bin/ffmpeg
      
      # Monitoring
      PROMETHEUS_ENABLED: "true"
      HEALTH_CHECK_ENABLED: "true"
      
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./logs:/app/logs
      - ./src:/app/src:ro # For development hot reload
    networks:
      - ai-ninja-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: ai-ninja-postgres
    environment:
      POSTGRES_DB: ai_ninja
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - ai-ninja-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ai-ninja-redis
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - ai-ninja-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: MinIO for S3-compatible local storage
  minio:
    image: minio/minio:latest
    container_name: ai-ninja-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - ai-ninja-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-ninja-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9092:9090"
    networks:
      - ai-ninja-network
    restart: unless-stopped

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-ninja-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - ai-ninja-network
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  ai-ninja-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  minio-data:
  prometheus-data:
  grafana-data: