apiVersion: apps/v1
kind: Deployment
metadata:
  name: profile-analytics
  namespace: ai-ninja
  labels:
    app: profile-analytics
    component: analytics
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: profile-analytics
  template:
    metadata:
      labels:
        app: profile-analytics
        component: analytics
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3004"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: profile-analytics-sa
      containers:
      - name: profile-analytics
        image: ai-ninja/profile-analytics:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3004
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DEBUG
          value: "false"
        - name: LOG_LEVEL
          value: "INFO"
        - name: HOST
          value: "0.0.0.0"
        - name: PORT
          value: "3004"
        
        # Database configuration
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: profile-analytics-secrets
              key: database-url
        - name: DATABASE_POOL_SIZE
          value: "15"
        - name: DATABASE_POOL_OVERFLOW
          value: "30"
        
        # Redis configuration
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: profile-analytics-secrets
              key: redis-url
        - name: REDIS_PREFIX
          value: "profile_analytics:"
        - name: CACHE_TTL
          value: "3600"
        
        # ML configuration
        - name: ML_MODEL_PATH
          value: "/app/ml/models"
        - name: ML_MODEL_UPDATE_INTERVAL
          value: "3600"
        - name: FEATURE_STORE_PATH
          value: "/app/ml/features"
        
        # Azure services
        - name: AZURE_COGNITIVE_KEY
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: cognitive-key
              optional: true
        - name: AZURE_COGNITIVE_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: azure-secrets
              key: cognitive-endpoint
              optional: true
        - name: AZURE_COGNITIVE_REGION
          value: "eastus2"
        
        # Service discovery
        - name: SERVICE_REGISTRY_URL
          value: "http://consul:8500"
        - name: USER_MANAGEMENT_URL
          value: "http://user-management:3005"
        - name: SMART_WHITELIST_URL
          value: "http://smart-whitelist:3006"
        - name: CONVERSATION_ENGINE_URL
          value: "http://conversation-engine:3003"
        
        # Feature flags
        - name: ENABLE_REAL_TIME_PROFILING
          value: "true"
        - name: ENABLE_BATCH_LEARNING
          value: "true"
        - name: ENABLE_ADVANCED_ANALYTICS
          value: "true"
        - name: ENABLE_NLP_FEATURES
          value: "true"
        
        # Security
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: profile-analytics-secrets
              key: secret-key
        - name: ALGORITHM
          value: "HS256"
        - name: ACCESS_TOKEN_EXPIRE_MINUTES
          value: "30"
        
        # Performance settings
        - name: BATCH_SIZE
          value: "1000"
        - name: BATCH_PROCESSING_INTERVAL
          value: "300"
        - name: RATE_LIMIT_REQUESTS
          value: "2000"
        - name: RATE_LIMIT_WINDOW
          value: "60"
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        
        livenessProbe:
          httpGet:
            path: /api/v1/health/liveness
            port: 3004
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/v1/health/readiness
            port: 3004
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        
        volumeMounts:
        - name: ml-models
          mountPath: /app/ml/models
        - name: ml-features
          mountPath: /app/ml/features
        - name: app-logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
      
      volumes:
      - name: ml-models
        persistentVolumeClaim:
          claimName: profile-analytics-ml-models
      - name: ml-features
        persistentVolumeClaim:
          claimName: profile-analytics-ml-features
      - name: app-logs
        persistentVolumeClaim:
          claimName: profile-analytics-logs
      - name: config
        configMap:
          name: profile-analytics-config
      
      nodeSelector:
        workload-type: compute
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - profile-analytics
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: profile-analytics
  namespace: ai-ninja
  labels:
    app: profile-analytics
    component: analytics
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3004
    targetPort: 3004
    protocol: TCP
  selector:
    app: profile-analytics

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: profile-analytics-sa
  namespace: ai-ninja

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: profile-analytics-config
  namespace: ai-ninja
data:
  app.yaml: |
    logging:
      level: INFO
      format: json
    
    ml:
      model_update_schedule: "0 2 * * *"  # Daily at 2 AM
      batch_processing_schedule: "0 */4 * * *"  # Every 4 hours
      feature_extraction_enabled: true
    
    cache:
      strategies:
        spam_profiles:
          ttl: 3600
          strategy: lru
        user_profiles:
          ttl: 1800
          strategy: lru
        ml_predictions:
          ttl: 300
          strategy: lfu
    
    monitoring:
      metrics_enabled: true
      tracing_enabled: true
      log_requests: true

---
apiVersion: v1
kind: Secret
metadata:
  name: profile-analytics-secrets
  namespace: ai-ninja
type: Opaque
stringData:
  database-url: "postgresql+asyncpg://postgres:password@postgres:5432/ai_answer_ninja"
  redis-url: "redis://redis:6379/0"
  secret-key: "your-secret-key-here-change-in-production"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: profile-analytics-ml-models
  namespace: ai-ninja
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: azure-files

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: profile-analytics-ml-features
  namespace: ai-ninja
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
  storageClassName: azure-files

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: profile-analytics-logs
  namespace: ai-ninja
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: managed-premium

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: profile-analytics-hpa
  namespace: ai-ninja
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: profile-analytics
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60