[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "conversation-analyzer"
dynamic = ["version"]
description = "通话内容分析和总结服务"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = ["ai", "conversation", "analysis", "nlp"]
authors = [
  { name = "AI Answer Ninja Team", email = "dev@ai-answer-ninja.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

dependencies = [
  "fastapi>=0.104.0",
  "uvicorn[standard]>=0.24.0",
  "pydantic>=2.5.0",
  "sqlalchemy[asyncio]>=2.0.0",
  "asyncpg>=0.29.0",
  "redis[hiredis]>=5.0.0",
  "azure-cognitiveservices-speech>=1.34.0",
  "openai>=1.3.0",
  "spacy>=3.7.0",
  "transformers>=4.36.0",
  "torch>=2.1.0",
  "librosa>=0.10.0",
  "structlog>=23.2.0",
]

[project.urls]
Documentation = "https://github.com/ai-answer-ninja/conversation-analyzer#readme"
Issues = "https://github.com/ai-answer-ninja/conversation-analyzer/issues"
Source = "https://github.com/ai-answer-ninja/conversation-analyzer"

[project.scripts]
conversation-analyzer = "app.main:main"

[tool.hatch.version]
path = "app/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-asyncio",
  "pytest-cov",
  "httpx",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov-html = [
  "- coverage combine", 
  "coverage html",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0", 
  "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:app tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py39"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["conversation_analyzer"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["conversation_analyzer", "tests"]
branch = true
parallel = true
omit = [
  "app/__about__.py",
]

[tool.coverage.paths]
conversation_analyzer = ["app", "*/conversation-analyzer/app"]
tests = ["tests", "*/conversation-analyzer/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]