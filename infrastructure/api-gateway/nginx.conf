# AI Answer Ninja API Gateway - Nginx Configuration
# Production-ready configuration with load balancing, health checks, and security

user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging Configuration
    log_format json_combined escape=json
    '{'
        '"timestamp":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"request_id":"$request_id",'
        '"method":"$request_method",'
        '"uri":"$request_uri",'
        '"status":$status,'
        '"body_bytes_sent":$body_bytes_sent,'
        '"request_time":$request_time,'
        '"upstream_response_time":"$upstream_response_time",'
        '"upstream_addr":"$upstream_addr",'
        '"user_agent":"$http_user_agent",'
        '"referer":"$http_referer",'
        '"x_forwarded_for":"$http_x_forwarded_for",'
        '"service_name":"$upstream_service_name"'
    '}';

    access_log /var/log/nginx/access.log json_combined buffer=16k flush=5s;

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Security Headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' ws: wss:;" always;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=websocket:10m rate=10r/s;
    
    # Connection Limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn conn_limit_per_ip 20;

    # Upstream Definitions
    upstream phone_gateway {
        least_conn;
        server phone-gateway:3001 max_fails=3 fail_timeout=30s;
        server phone-gateway-2:3001 max_fails=3 fail_timeout=30s backup;
        keepalive 32;
        
        # Health check
        check interval=5000 rise=2 fall=3 timeout=3000 type=http;
        check_http_send "GET /health HTTP/1.0\r\n\r\n";
        check_http_expect_alive http_2xx http_3xx;
    }

    upstream realtime_processor {
        ip_hash; # Sticky sessions for WebSocket
        server realtime-processor:3002 max_fails=2 fail_timeout=20s;
        server realtime-processor-2:3002 max_fails=2 fail_timeout=20s backup;
        keepalive 64;
        
        # Health check
        check interval=3000 rise=2 fall=2 timeout=2000 type=http;
        check_http_send "GET /health HTTP/1.0\r\n\r\n";
        check_http_expect_alive http_2xx http_3xx;
    }

    upstream conversation_engine {
        least_conn;
        server conversation-engine:3003 max_fails=3 fail_timeout=45s;
        server conversation-engine-2:3003 max_fails=3 fail_timeout=45s backup;
        keepalive 16;
        
        # Health check
        check interval=10000 rise=2 fall=3 timeout=5000 type=http;
        check_http_send "GET /health HTTP/1.0\r\n\r\n";
        check_http_expect_alive http_2xx http_3xx;
    }

    upstream profile_analytics {
        least_conn;
        server profile-analytics:3004 max_fails=3 fail_timeout=30s;
        server profile-analytics-2:3004 max_fails=3 fail_timeout=30s backup;
        keepalive 32;
    }

    upstream user_management {
        least_conn;
        server user-management:3005 max_fails=3 fail_timeout=30s;
        server user-management-2:3005 max_fails=3 fail_timeout=30s backup;
        keepalive 16;
    }

    upstream smart_whitelist {
        least_conn;
        server smart-whitelist:3006 max_fails=3 fail_timeout=30s;
        server smart-whitelist-2:3006 max_fails=3 fail_timeout=30s backup;
        keepalive 32;
    }

    upstream configuration_service {
        least_conn;
        server configuration-service:3007 max_fails=5 fail_timeout=10s;
        server configuration-service-2:3007 max_fails=5 fail_timeout=10s backup;
        keepalive 64;
    }

    upstream storage_service {
        least_conn;
        server storage-service:3008 max_fails=2 fail_timeout=60s;
        server storage-service-2:3008 max_fails=2 fail_timeout=60s backup;
        keepalive 8;
    }

    upstream monitoring_service {
        least_conn;
        server monitoring-service:3009 max_fails=3 fail_timeout=30s;
        server monitoring-service-2:3009 max_fails=3 fail_timeout=30s backup;
        keepalive 16;
    }

    # Proxy Cache Configuration
    proxy_cache_path /var/cache/nginx/ai-ninja levels=1:2 keys_zone=ai_ninja_cache:100m max_size=1g inactive=60m use_temp_path=off;

    # Main Server Block
    server {
        listen 80;
        listen [::]:80;
        server_name api.ai-ninja.com;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }

    # HTTPS Server Block
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name api.ai-ninja.com;

        # SSL Configuration
        ssl_certificate /etc/ssl/certs/ai-ninja.com.crt;
        ssl_certificate_key /etc/ssl/private/ai-ninja.com.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256;
        ssl_prefer_server_ciphers off;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # Request ID for tracing
        add_header X-Request-ID $request_id always;

        # Client Settings
        client_max_body_size 100M;
        client_body_timeout 60s;
        client_header_timeout 60s;

        # CORS Configuration
        set $cors_origin "";
        set $cors_methods "";
        set $cors_headers "";
        set $cors_credentials "";

        if ($http_origin ~* (https?://localhost:[0-9]+|https://admin\.ai-ninja\.com|https://api\.ai-ninja\.com)) {
            set $cors_origin $http_origin;
            set $cors_methods "GET, POST, PUT, DELETE, OPTIONS, HEAD";
            set $cors_headers "Accept, Authorization, Content-Type, X-Request-ID, X-User-ID, X-Session-ID, User-Agent, Referer";
            set $cors_credentials "true";
        }

        # CORS Headers
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods $cors_methods always;
        add_header Access-Control-Allow-Headers $cors_headers always;
        add_header Access-Control-Allow-Credentials $cors_credentials always;
        add_header Access-Control-Expose-Headers "X-Request-ID, X-Response-Time" always;
        add_header Access-Control-Max-Age "3600" always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Health Check Endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Phone Gateway Routes
        location /api/v1/phone/ {
            set $upstream_service_name "phone-gateway";
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://phone_gateway;
            include /etc/nginx/proxy_params;
            
            # API Key validation for webhooks
            if ($request_uri ~* "/webhook") {
                access_by_lua_block {
                    local api_key = ngx.var.http_x_api_key
                    if not api_key or api_key ~= os.getenv("AZURE_WEBHOOK_API_KEY") then
                        ngx.status = 401
                        ngx.say("Invalid API Key")
                        ngx.exit(401)
                    end
                }
            }
        }

        # Realtime Processor Routes (HTTP)
        location /api/v1/realtime/process {
            set $upstream_service_name "realtime-processor";
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://realtime_processor;
            include /etc/nginx/proxy_params;
            
            # Increased timeout for audio processing
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # WebSocket Proxy for Realtime Communication
        location /api/v1/realtime/ws {
            set $upstream_service_name "realtime-processor";
            limit_req zone=websocket burst=5 nodelay;
            
            proxy_pass http://realtime_processor;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # WebSocket specific settings
            proxy_connect_timeout 7s;
            proxy_send_timeout 3600s;
            proxy_read_timeout 3600s;
            proxy_buffering off;
            proxy_cache off;
        }

        # Conversation Engine Routes
        location /api/v1/conversation/ {
            set $upstream_service_name "conversation-engine";
            limit_req zone=api burst=30 nodelay;
            
            proxy_pass http://conversation_engine;
            include /etc/nginx/proxy_params;
            
            # Extended timeout for AI processing
            proxy_connect_timeout 15s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Profile Analytics Routes
        location /api/v1/analytics/ {
            set $upstream_service_name "profile-analytics";
            limit_req zone=api burst=40 nodelay;
            
            proxy_pass http://profile_analytics;
            include /etc/nginx/proxy_params;
        }

        # User Management Routes
        location /api/v1/auth/ {
            set $upstream_service_name "user-management";
            limit_req zone=auth burst=3 nodelay;
            
            proxy_pass http://user_management;
            include /etc/nginx/proxy_params;
        }

        location /api/v1/users/ {
            set $upstream_service_name "user-management";
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://user_management;
            include /etc/nginx/proxy_params;
        }

        # Smart Whitelist Routes
        location /api/v1/whitelist/ {
            set $upstream_service_name "smart-whitelist";
            limit_req zone=api burst=30 nodelay;
            
            proxy_pass http://smart_whitelist;
            include /etc/nginx/proxy_params;
        }

        # Configuration Service Routes
        location /api/v1/config/ {
            set $upstream_service_name "configuration-service";
            limit_req zone=api burst=100 nodelay;
            
            proxy_pass http://configuration_service;
            include /etc/nginx/proxy_params;
            
            # Enable caching for GET requests
            proxy_cache ai_ninja_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_key "$request_method$request_uri$args";
            proxy_cache_bypass $http_cache_control;
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Storage Service Routes
        location /api/v1/storage/ {
            set $upstream_service_name "storage-service";
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://storage_service;
            include /etc/nginx/proxy_params;
            
            # Extended timeout for file operations
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # File upload specific settings
            client_max_body_size 100M;
            proxy_request_buffering off;
        }

        # Monitoring Service Routes (restricted access)
        location /api/v1/monitoring/ {
            set $upstream_service_name "monitoring-service";
            
            # IP whitelist for internal access
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            allow 127.0.0.1;
            deny all;
            
            proxy_pass http://monitoring_service;
            include /etc/nginx/proxy_params;
        }

        # Static Assets (if needed)
        location /static/ {
            root /var/www;
            expires 1y;
            add_header Cache-Control "public, immutable";
            gzip_static on;
        }

        # Deny access to sensitive files
        location ~ /\. {
            deny all;
            return 404;
        }

        location ~ \.(env|ini|conf|log)$ {
            deny all;
            return 404;
        }

        # Default error responses
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Admin Panel Server (separate server block)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name admin.ai-ninja.com;

        # SSL Configuration (same as above)
        ssl_certificate /etc/ssl/certs/ai-ninja.com.crt;
        ssl_certificate_key /etc/ssl/private/ai-ninja.com.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256;
        ssl_prefer_server_ciphers off;

        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # Admin Panel Static Files
        location / {
            root /var/www/admin-panel;
            index index.html;
            try_files $uri $uri/ /index.html;
            
            # Security headers for admin panel
            add_header X-Frame-Options DENY always;
            add_header X-Content-Type-Options nosniff always;
            add_header X-XSS-Protection "1; mode=block" always;
        }

        # API Proxy for admin panel
        location /api/ {
            proxy_pass https://api.ai-ninja.com;
            proxy_ssl_verify off;
            include /etc/nginx/proxy_params;
        }
    }

    # Status Page for Health Checks
    server {
        listen 8080;
        server_name _;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
        }
        
        location /upstream_status {
            check_status;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
        }
    }
}