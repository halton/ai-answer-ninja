/**\n * E2E Tests for Admin Panel\n * \n * Tests the complete admin panel functionality using Playwright,\n * including user interactions, real-time updates, and system management.\n */\n\nimport { test, expect, Page, BrowserContext } from '@playwright/test';\nimport { TestContainerManager } from '../utils/test-container-manager';\nimport { TestDataFactory } from '../utils/test-data-factory';\nimport { Client as PgClient } from 'pg';\nimport Redis from 'ioredis';\n\n// Global test setup\nlet containerManager: TestContainerManager;\nlet dbClient: PgClient;\nlet redisClient: Redis;\nlet testDataFactory: TestDataFactory;\nlet adminUserToken: string;\n\ntest.beforeAll(async () => {\n  console.log('ðŸš€ Starting E2E test infrastructure...');\n  \n  // Start test containers\n  containerManager = new TestContainerManager();\n  await containerManager.startAll();\n  \n  // Setup database connection\n  dbClient = new PgClient({\n    host: 'localhost',\n    port: 5433,\n    database: 'ai_ninja_test',\n    user: 'test_user',\n    password: 'test_password'\n  });\n  await dbClient.connect();\n  \n  // Setup Redis connection\n  redisClient = new Redis({\n    host: 'localhost',\n    port: 6380,\n    db: 1\n  });\n  \n  // Initialize test data factory\n  testDataFactory = new TestDataFactory(dbClient, redisClient);\n  await testDataFactory.setupSchema();\n  \n  // Create admin user and get auth token\n  const adminUser = await testDataFactory.createUser({\n    phone: '+1234567890',\n    name: 'Admin User',\n    role: 'admin'\n  });\n  \n  adminUserToken = await testDataFactory.generateAuthToken(adminUser.id);\n  \n  console.log('âœ… E2E test infrastructure ready');\n});\n\ntest.afterAll(async () => {\n  console.log('ðŸ§¹ Cleaning up E2E test infrastructure...');\n  \n  if (dbClient) await dbClient.end();\n  if (redisClient) redisClient.disconnect();\n  if (containerManager) await containerManager.stopAll();\n  \n  console.log('âœ… E2E cleanup complete');\n});\n\ntest.beforeEach(async ({ page, context }) => {\n  // Clear test data before each test\n  await testDataFactory.clearTestData();\n  await redisClient.flushdb();\n  \n  // Set auth token in browser context\n  await context.addCookies([{\n    name: 'auth_token',\n    value: adminUserToken,\n    domain: 'localhost',\n    path: '/'\n  }]);\n  \n  // Navigate to admin panel\n  await page.goto('http://localhost:3000');\n});\n\ntest.describe('Admin Panel Authentication', () => {\n  test('should redirect to login when not authenticated', async ({ page, context }) => {\n    // Clear auth cookies\n    await context.clearCookies();\n    \n    await page.goto('http://localhost:3000/dashboard');\n    \n    await expect(page).toHaveURL(/login/);\n    await expect(page.locator('h1')).toContainText('Login');\n  });\n  \n  test('should login successfully with valid credentials', async ({ page, context }) => {\n    await context.clearCookies();\n    \n    await page.goto('http://localhost:3000/login');\n    \n    // Fill login form\n    await page.fill('[data-testid=\"phone-input\"]', '+1234567890');\n    await page.fill('[data-testid=\"password-input\"]', 'admin123');\n    await page.click('[data-testid=\"login-button\"]');\n    \n    // Should redirect to dashboard\n    await expect(page).toHaveURL(/dashboard/);\n    await expect(page.locator('[data-testid=\"welcome-message\"]')).toContainText('Welcome');\n  });\n  \n  test('should handle login failure gracefully', async ({ page, context }) => {\n    await context.clearCookies();\n    \n    await page.goto('http://localhost:3000/login');\n    \n    // Try with invalid credentials\n    await page.fill('[data-testid=\"phone-input\"]', '+9999999999');\n    await page.fill('[data-testid=\"password-input\"]', 'wrongpassword');\n    await page.click('[data-testid=\"login-button\"]');\n    \n    // Should show error message\n    await expect(page.locator('[data-testid=\"error-message\"]')).toContainText('Invalid credentials');\n    await expect(page).toHaveURL(/login/);\n  });\n});\n\ntest.describe('Dashboard Overview', () => {\n  test('should display system metrics and statistics', async ({ page }) => {\n    // Create test data for metrics\n    const user = await testDataFactory.createUser();\n    const activeCall = await testDataFactory.createCallRecord({\n      user_id: user.id,\n      call_status: 'active',\n      call_type: 'spam_suspected'\n    });\n    \n    await page.reload();\n    \n    // Check metrics cards\n    await expect(page.locator('[data-testid=\"active-calls-metric\"]')).toContainText('1');\n    await expect(page.locator('[data-testid=\"total-users-metric\"]')).toContainText('1');\n    \n    // Check recent activity\n    await expect(page.locator('[data-testid=\"recent-activity\"]')).toBeVisible();\n    await expect(page.locator('[data-testid=\"recent-call-item\"]')).toContainText(activeCall.caller_phone);\n  });\n  \n  test('should refresh metrics automatically', async ({ page }) => {\n    const user = await testDataFactory.createUser();\n    \n    // Initial state\n    await expect(page.locator('[data-testid=\"total-users-metric\"]')).toContainText('1');\n    \n    // Add another user\n    await testDataFactory.createUser({ phone: '+9999999999' });\n    \n    // Wait for auto-refresh (should happen within 10 seconds)\n    await expect(page.locator('[data-testid=\"total-users-metric\"]')).toContainText('2', { timeout: 15000 });\n  });\n  \n  test('should navigate to different sections', async ({ page }) => {\n    // Test navigation to Users section\n    await page.click('[data-testid=\"nav-users\"]');\n    await expect(page).toHaveURL(/users/);\n    await expect(page.locator('h1')).toContainText('User Management');\n    \n    // Test navigation to Calls section\n    await page.click('[data-testid=\"nav-calls\"]');\n    await expect(page).toHaveURL(/calls/);\n    await expect(page.locator('h1')).toContainText('Call Management');\n    \n    // Test navigation to Analytics\n    await page.click('[data-testid=\"nav-analytics\"]');\n    await expect(page).toHaveURL(/analytics/);\n    await expect(page.locator('h1')).toContainText('Analytics');\n  });\n});\n\ntest.describe('User Management', () => {\n  test('should display user list with pagination', async ({ page }) => {\n    // Create multiple users\n    const users = [];\n    for (let i = 0; i < 15; i++) {\n      users.push(await testDataFactory.createUser({\n        phone: `+100000000${i.toString().padStart(2, '0')}`,\n        name: `Test User ${i + 1}`\n      }));\n    }\n    \n    await page.goto('http://localhost:3000/users');\n    \n    // Check that users are displayed\n    await expect(page.locator('[data-testid=\"user-table\"]')).toBeVisible();\n    \n    // Check pagination (default page size is 10)\n    const userRows = page.locator('[data-testid=\"user-row\"]');\n    await expect(userRows).toHaveCount(10);\n    \n    // Check pagination controls\n    await expect(page.locator('[data-testid=\"pagination-next\"]')).toBeVisible();\n    \n    // Go to next page\n    await page.click('[data-testid=\"pagination-next\"]');\n    await expect(userRows).toHaveCount(5); // Remaining users\n  });\n  \n  test('should search and filter users', async ({ page }) => {\n    const users = [\n      await testDataFactory.createUser({ name: 'Alice Johnson', phone: '+1111111111' }),\n      await testDataFactory.createUser({ name: 'Bob Smith', phone: '+2222222222' }),\n      await testDataFactory.createUser({ name: 'Charlie Brown', phone: '+3333333333' })\n    ];\n    \n    await page.goto('http://localhost:3000/users');\n    \n    // Test name search\n    await page.fill('[data-testid=\"user-search\"]', 'Alice');\n    await page.press('[data-testid=\"user-search\"]', 'Enter');\n    \n    await expect(page.locator('[data-testid=\"user-row\"]')).toHaveCount(1);\n    await expect(page.locator('[data-testid=\"user-row\"]')).toContainText('Alice Johnson');\n    \n    // Test phone search\n    await page.fill('[data-testid=\"user-search\"]', '+2222222222');\n    await page.press('[data-testid=\"user-search\"]', 'Enter');\n    \n    await expect(page.locator('[data-testid=\"user-row\"]')).toHaveCount(1);\n    await expect(page.locator('[data-testid=\"user-row\"]')).toContainText('Bob Smith');\n    \n    // Clear search\n    await page.fill('[data-testid=\"user-search\"]', '');\n    await page.press('[data-testid=\"user-search\"]', 'Enter');\n    \n    await expect(page.locator('[data-testid=\"user-row\"]')).toHaveCount(3);\n  });\n  \n  test('should create new user', async ({ page }) => {\n    await page.goto('http://localhost:3000/users');\n    \n    // Click create user button\n    await page.click('[data-testid=\"create-user-button\"]');\n    \n    // Fill user form\n    await page.fill('[data-testid=\"user-name-input\"]', 'New Test User');\n    await page.fill('[data-testid=\"user-phone-input\"]', '+5555555555');\n    await page.selectOption('[data-testid=\"user-personality-select\"]', 'direct');\n    \n    // Submit form\n    await page.click('[data-testid=\"save-user-button\"]');\n    \n    // Should show success message\n    await expect(page.locator('[data-testid=\"success-message\"]')).toContainText('User created successfully');\n    \n    // Should appear in user list\n    await expect(page.locator('[data-testid=\"user-row\"]:has-text(\"New Test User\")')).toBeVisible();\n    \n    // Verify in database\n    const dbUser = await dbClient.query(\n      'SELECT * FROM users WHERE phone_number = $1',\n      ['+5555555555']\n    );\n    \n    expect(dbUser.rows).toHaveLength(1);\n    expect(dbUser.rows[0].name).toBe('New Test User');\n  });\n  \n  test('should edit existing user', async ({ page }) => {\n    const user = await testDataFactory.createUser({\n      name: 'Original Name',\n      personality: 'polite'\n    });\n    \n    await page.goto('http://localhost:3000/users');\n    \n    // Click edit button for the user\n    await page.click(`[data-testid=\"edit-user-${user.id}\"]`);\n    \n    // Update user information\n    await page.fill('[data-testid=\"user-name-input\"]', 'Updated Name');\n    await page.selectOption('[data-testid=\"user-personality-select\"]', 'humorous');\n    \n    // Save changes\n    await page.click('[data-testid=\"save-user-button\"]');\n    \n    // Should show success message\n    await expect(page.locator('[data-testid=\"success-message\"]')).toContainText('User updated successfully');\n    \n    // Should reflect changes in list\n    await expect(page.locator('[data-testid=\"user-row\"]:has-text(\"Updated Name\")')).toBeVisible();\n    \n    // Verify in database\n    const dbUser = await dbClient.query(\n      'SELECT * FROM users WHERE id = $1',\n      [user.id]\n    );\n    \n    expect(dbUser.rows[0].name).toBe('Updated Name');\n    expect(dbUser.rows[0].personality).toBe('humorous');\n  });\n});\n\ntest.describe('Call Management', () => {\n  test('should display active calls with real-time updates', async ({ page }) => {\n    const user = await testDataFactory.createUser();\n    const activeCall = await testDataFactory.createCallRecord({\n      user_id: user.id,\n      call_status: 'active',\n      caller_phone: '+7777777777'\n    });\n    \n    await page.goto('http://localhost:3000/calls');\n    \n    // Should display the active call\n    await expect(page.locator('[data-testid=\"active-calls-section\"]')).toBeVisible();\n    await expect(page.locator('[data-testid=\"call-row\"]')).toContainText('+7777777777');\n    await expect(page.locator('[data-testid=\"call-status\"]')).toContainText('Active');\n    \n    // Simulate call status update\n    await dbClient.query(\n      'UPDATE call_records SET call_status = $1, end_time = CURRENT_TIMESTAMP WHERE id = $2',\n      ['completed', activeCall.id]\n    );\n    \n    // Should update in real-time (WebSocket or polling)\n    await expect(page.locator('[data-testid=\"call-status\"]')).toContainText('Completed', { timeout: 10000 });\n  });\n  \n  test('should show call details and conversation', async ({ page }) => {\n    const user = await testDataFactory.createUser();\n    const callRecord = await testDataFactory.createCallRecord({\n      user_id: user.id,\n      call_status: 'completed',\n      caller_phone: '+8888888888'\n    });\n    \n    // Add conversation data\n    await testDataFactory.createConversation({\n      call_record_id: callRecord.id,\n      speaker: 'caller',\n      message_text: 'Hello, I am calling about insurance',\n      intent_category: 'insurance_sales'\n    });\n    \n    await testDataFactory.createConversation({\n      call_record_id: callRecord.id,\n      speaker: 'ai',\n      message_text: 'Thank you for calling, but I am not interested in insurance at this time.',\n      intent_category: 'polite_decline'\n    });\n    \n    await page.goto('http://localhost:3000/calls');\n    \n    // Click on call to view details\n    await page.click(`[data-testid=\"view-call-${callRecord.id}\"]`);\n    \n    // Should show call details modal or page\n    await expect(page.locator('[data-testid=\"call-details-modal\"]')).toBeVisible();\n    await expect(page.locator('[data-testid=\"call-details-phone\"]')).toContainText('+8888888888');\n    \n    // Should show conversation transcript\n    await expect(page.locator('[data-testid=\"conversation-transcript\"]')).toBeVisible();\n    await expect(page.locator('[data-testid=\"message-caller\"]')).toContainText('Hello, I am calling about insurance');\n    await expect(page.locator('[data-testid=\"message-ai\"]')).toContainText('Thank you for calling, but I am not interested');\n  });\n  \n  test('should filter calls by date and status', async ({ page }) => {\n    const user = await testDataFactory.createUser();\n    \n    // Create calls with different statuses and dates\n    const activeCall = await testDataFactory.createCallRecord({\n      user_id: user.id,\n      call_status: 'active',\n      caller_phone: '+1111111111'\n    });\n    \n    const completedCall = await testDataFactory.createCallRecord({\n      user_id: user.id,\n      call_status: 'completed',\n      caller_phone: '+2222222222'\n    });\n    \n    await page.goto('http://localhost:3000/calls');\n    \n    // Filter by status\n    await page.selectOption('[data-testid=\"status-filter\"]', 'active');\n    \n    await expect(page.locator('[data-testid=\"call-row\"]')).toHaveCount(1);\n    await expect(page.locator('[data-testid=\"call-row\"]')).toContainText('+1111111111');\n    \n    // Change filter to completed\n    await page.selectOption('[data-testid=\"status-filter\"]', 'completed');\n    \n    await expect(page.locator('[data-testid=\"call-row\"]')).toHaveCount(1);\n    await expect(page.locator('[data-testid=\"call-row\"]')).toContainText('+2222222222');\n    \n    // Show all\n    await page.selectOption('[data-testid=\"status-filter\"]', 'all');\n    \n    await expect(page.locator('[data-testid=\"call-row\"]')).toHaveCount(2);\n  });\n});\n\ntest.describe('Whitelist Management', () => {\n  test('should manage user whitelist contacts', async ({ page }) => {\n    const user = await testDataFactory.createUser({ name: 'Whitelist Test User' });\n    \n    await page.goto(`http://localhost:3000/users/${user.id}/whitelist`);\n    \n    // Should show empty whitelist initially\n    await expect(page.locator('[data-testid=\"empty-whitelist\"]')).toContainText('No whitelisted contacts');\n    \n    // Add new contact\n    await page.click('[data-testid=\"add-contact-button\"]');\n    \n    await page.fill('[data-testid=\"contact-phone-input\"]', '+9999999999');\n    await page.fill('[data-testid=\"contact-name-input\"]', 'Important Contact');\n    await page.click('[data-testid=\"save-contact-button\"]');\n    \n    // Should show in list\n    await expect(page.locator('[data-testid=\"contact-row\"]')).toContainText('Important Contact');\n    await expect(page.locator('[data-testid=\"contact-row\"]')).toContainText('+9999999999');\n    \n    // Verify in database\n    const dbContact = await dbClient.query(\n      'SELECT * FROM smart_whitelists WHERE user_id = $1',\n      [user.id]\n    );\n    \n    expect(dbContact.rows).toHaveLength(1);\n    expect(dbContact.rows[0].contact_name).toBe('Important Contact');\n  });\n  \n  test('should remove whitelist contact', async ({ page }) => {\n    const user = await testDataFactory.createUser();\n    const contact = await testDataFactory.createWhitelistEntry({\n      user_id: user.id,\n      contact_phone: '+1111111111',\n      contact_name: 'Contact to Remove'\n    });\n    \n    await page.goto(`http://localhost:3000/users/${user.id}/whitelist`);\n    \n    // Should show contact\n    await expect(page.locator('[data-testid=\"contact-row\"]')).toContainText('Contact to Remove');\n    \n    // Click remove button\n    await page.click(`[data-testid=\"remove-contact-${contact.id}\"]`);\n    \n    // Confirm deletion\n    await page.click('[data-testid=\"confirm-delete\"]');\n    \n    // Should show empty list\n    await expect(page.locator('[data-testid=\"empty-whitelist\"]')).toBeVisible();\n    \n    // Verify removed from database\n    const dbContact = await dbClient.query(\n      'SELECT * FROM smart_whitelists WHERE id = $1',\n      [contact.id]\n    );\n    \n    expect(dbContact.rows).toHaveLength(0);\n  });\n});\n\ntest.describe('Analytics Dashboard', () => {\n  test('should display call statistics and charts', async ({ page }) => {\n    const user = await testDataFactory.createUser();\n    \n    // Create test data for analytics\n    await testDataFactory.createCallRecord({\n      user_id: user.id,\n      call_type: 'spam_suspected',\n      call_status: 'completed',\n      duration_seconds: 45\n    });\n    \n    await testDataFactory.createCallRecord({\n      user_id: user.id,\n      call_type: 'whitelisted',\n      call_status: 'transferred',\n      duration_seconds: 120\n    });\n    \n    await page.goto('http://localhost:3000/analytics');\n    \n    // Check that charts are displayed\n    await expect(page.locator('[data-testid=\"call-types-chart\"]')).toBeVisible();\n    await expect(page.locator('[data-testid=\"call-duration-chart\"]')).toBeVisible();\n    \n    // Check statistics cards\n    await expect(page.locator('[data-testid=\"total-calls-stat\"]')).toContainText('2');\n    await expect(page.locator('[data-testid=\"spam-blocked-stat\"]')).toContainText('1');\n  });\n  \n  test('should allow date range filtering', async ({ page }) => {\n    const user = await testDataFactory.createUser();\n    \n    await page.goto('http://localhost:3000/analytics');\n    \n    // Set date range filter\n    await page.fill('[data-testid=\"start-date\"]', '2023-12-01');\n    await page.fill('[data-testid=\"end-date\"]', '2023-12-31');\n    await page.click('[data-testid=\"apply-filter\"]');\n    \n    // Should update charts and stats\n    await expect(page.locator('[data-testid=\"date-range-indicator\"]')).toContainText('Dec 1 - Dec 31, 2023');\n  });\n});\n\ntest.describe('System Settings', () => {\n  test('should manage system configuration', async ({ page }) => {\n    await page.goto('http://localhost:3000/settings');\n    \n    // Should show configuration options\n    await expect(page.locator('[data-testid=\"settings-form\"]')).toBeVisible();\n    \n    // Test updating a setting\n    await page.fill('[data-testid=\"max-call-duration\"]', '180');\n    await page.selectOption('[data-testid=\"default-personality\"]', 'direct');\n    \n    await page.click('[data-testid=\"save-settings\"]');\n    \n    // Should show success message\n    await expect(page.locator('[data-testid=\"success-message\"]')).toContainText('Settings saved successfully');\n  });\n});\n\ntest.describe('Real-time Features', () => {\n  test('should show real-time call updates', async ({ page }) => {\n    const user = await testDataFactory.createUser();\n    \n    await page.goto('http://localhost:3000/dashboard');\n    \n    // Create a new call while on dashboard\n    const newCall = await testDataFactory.createCallRecord({\n      user_id: user.id,\n      call_status: 'active',\n      caller_phone: '+1234567890'\n    });\n    \n    // Should appear in real-time (WebSocket updates)\n    await expect(page.locator('[data-testid=\"active-calls-metric\"]')).toContainText('1', { timeout: 10000 });\n    \n    // Update call status\n    await dbClient.query(\n      'UPDATE call_records SET call_status = $1 WHERE id = $2',\n      ['completed', newCall.id]\n    );\n    \n    // Should update active calls count\n    await expect(page.locator('[data-testid=\"active-calls-metric\"]')).toContainText('0', { timeout: 10000 });\n  });\n});\n\ntest.describe('Performance and Responsiveness', () => {\n  test('should load pages within acceptable time', async ({ page }) => {\n    const startTime = Date.now();\n    \n    await page.goto('http://localhost:3000/dashboard');\n    await expect(page.locator('[data-testid=\"dashboard-content\"]')).toBeVisible();\n    \n    const loadTime = Date.now() - startTime;\n    console.log(`Dashboard load time: ${loadTime}ms`);\n    \n    expect(loadTime).toBeLessThan(3000); // Should load within 3 seconds\n  });\n  \n  test('should handle large datasets efficiently', async ({ page }) => {\n    const user = await testDataFactory.createUser();\n    \n    // Create many call records\n    const promises = [];\n    for (let i = 0; i < 100; i++) {\n      promises.push(testDataFactory.createCallRecord({\n        user_id: user.id,\n        caller_phone: `+${1000000000 + i}`,\n        call_status: i % 3 === 0 ? 'active' : 'completed'\n      }));\n    }\n    \n    await Promise.all(promises);\n    \n    const startTime = Date.now();\n    await page.goto('http://localhost:3000/calls');\n    \n    await expect(page.locator('[data-testid=\"call-table\"]')).toBeVisible();\n    \n    const renderTime = Date.now() - startTime;\n    console.log(`Large dataset render time: ${renderTime}ms`);\n    \n    expect(renderTime).toBeLessThan(5000); // Should render within 5 seconds\n    \n    // Should show pagination for large datasets\n    await expect(page.locator('[data-testid=\"pagination\"]')).toBeVisible();\n  });\n});\n\ntest.describe('Error Handling', () => {\n  test('should handle API errors gracefully', async ({ page }) => {\n    // Stop the backend services to simulate API errors\n    await containerManager.stopService('user-management');\n    \n    await page.goto('http://localhost:3000/users');\n    \n    // Should show error message\n    await expect(page.locator('[data-testid=\"error-message\"]')).toContainText('Unable to load users');\n    \n    // Should show retry button\n    await expect(page.locator('[data-testid=\"retry-button\"]')).toBeVisible();\n    \n    // Restart service and retry\n    await containerManager.startService('user-management');\n    \n    await page.click('[data-testid=\"retry-button\"]');\n    \n    // Should load successfully after retry\n    await expect(page.locator('[data-testid=\"user-table\"]')).toBeVisible();\n  });\n});\n"}