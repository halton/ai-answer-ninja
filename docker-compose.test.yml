
services:
  # 数据库服务
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_answer_ninja_test
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./scripts/db/init-test.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d ai_answer_ninja_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Redis缓存
  redis-test:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass testpass
    ports:
      - "6380:6379"
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "testpass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Phone Gateway Service
  phone-gateway-test:
    build:
      context: ./services/phone-gateway
      dockerfile: Dockerfile.test
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: test
      PORT: 3001
      DATABASE_URL: postgresql://testuser:testpass@postgres-test:5432/ai_answer_ninja_test
      REDIS_URL: redis://:testpass@redis-test:6379
      AZURE_SPEECH_KEY: ${AZURE_SPEECH_KEY_TEST}
      AZURE_SPEECH_REGION: eastus
      LOG_LEVEL: debug
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - test-network

  # Configuration Service
  configuration-service-test:
    build:
      context: ./services/configuration-service
      dockerfile: Dockerfile.test
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: test
      PORT: 3007
      DATABASE_URL: postgresql://testuser:testpass@postgres-test:5432/ai_answer_ninja_test
      REDIS_URL: redis://:testpass@redis-test:6379
      LOG_LEVEL: debug
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test-network

  # Monitoring Service
  monitoring-test:
    build:
      context: ./services/monitoring
      dockerfile: Dockerfile.test
    ports:
      - "3009:3009"
      - "9090:9090"  # Prometheus metrics
    environment:
      NODE_ENV: test
      PORT: 3009
      DATABASE_URL: postgresql://testuser:testpass@postgres-test:5432/ai_answer_ninja_test
      REDIS_URL: redis://:testpass@redis-test:6379
      LOG_LEVEL: debug
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test-network

  # Smart Whitelist Service
  smart-whitelist-test:
    build:
      context: ./services/smart-whitelist-node
      dockerfile: Dockerfile.test
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: test
      PORT: 3006
      DATABASE_URL: postgresql://testuser:testpass@postgres-test:5432/ai_answer_ninja_test
      REDIS_URL: redis://:testpass@redis-test:6379
      PYTHON_SERVICE_URL: http://ml-classifier-test:8000
      LOG_LEVEL: debug
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      ml-classifier-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test-network

  # ML分类器服务 (Python)
  ml-classifier-test:
    build:
      context: ./services/smart-whitelist-node/src/ml
      dockerfile: Dockerfile.test
    ports:
      - "8001:8000"
    environment:
      ENVIRONMENT: test
      REDIS_URL: redis://:testpass@redis-test:6379
      MODEL_PATH: /app/models/test
    volumes:
      - ./services/smart-whitelist-node/src/ml/models:/app/models
    depends_on:
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test-network

  # API网关 (nginx)
  api-gateway-test:
    image: nginx:alpine
    ports:
      - "3000:80"
    volumes:
      - ./docker/nginx/test.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - phone-gateway-test
      - configuration-service-test
      - monitoring-test
      - smart-whitelist-test
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test-network

volumes:
  postgres_test_data:
  redis_test_data:

networks:
  test-network:
    driver: bridge