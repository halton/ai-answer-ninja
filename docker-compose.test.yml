# Docker Compose configuration for testing environment
version: '3.9'

networks:
  ai-ninja-test:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  test_logs:
    driver: local

services:
  # Database Services
  postgres-test:
    image: postgres:15-alpine
    container_name: ai-ninja-postgres-test
    environment:
      POSTGRES_DB: ai_ninja_test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: testpass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - ai-ninja-test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d ai_ninja_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis-test:
    image: redis:7-alpine
    container_name: ai-ninja-redis-test
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_test_data:/data
    ports:
      - "6380:6379"
    networks:
      - ai-ninja-test
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M

  # Core Services
  user-management-test:
    build:
      context: .
      dockerfile: services/user-management/Dockerfile
      target: testing
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-test}
    container_name: ai-ninja-user-management-test
    environment:
      NODE_ENV: test
      PORT: 3005
      DATABASE_URL: postgresql://test:testpass@postgres-test:5432/ai_ninja_test
      REDIS_URL: redis://redis-test:6379
      JWT_SECRET: test-jwt-secret-key
      LOG_LEVEL: debug
      HEALTH_CHECK_ENDPOINT: /health
    ports:
      - "3005:3005"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - ai-ninja-test
    volumes:
      - test_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  smart-whitelist-test:
    build:
      context: .
      dockerfile: services/smart-whitelist/Dockerfile
      target: testing
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-test}
    container_name: ai-ninja-smart-whitelist-test
    environment:
      GIN_MODE: test
      PORT: 3006
      DATABASE_URL: postgresql://test:testpass@postgres-test:5432/ai_ninja_test
      REDIS_URL: redis://redis-test:6379
      LOG_LEVEL: debug
      USER_MANAGEMENT_URL: http://user-management-test:3005
    ports:
      - "3006:3006"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      user-management-test:
        condition: service_healthy
    networks:
      - ai-ninja-test
    volumes:
      - test_logs:/app/logs
    healthcheck:
      test: ["CMD", "/app", "-health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 256M

  realtime-processor-test:
    build:
      context: .
      dockerfile: services/realtime-processor/Dockerfile
      target: testing
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-test}
    container_name: ai-ninja-realtime-processor-test
    environment:
      NODE_ENV: test
      PORT: 3002
      REDIS_URL: redis://redis-test:6379
      USER_MANAGEMENT_URL: http://user-management-test:3005
      CONVERSATION_ENGINE_URL: http://conversation-engine-test:3003
      WEBSOCKET_PORT: 3002
      AUDIO_PROCESSING_ENABLED: "true"
      LOG_LEVEL: debug
    ports:
      - "3002:3002"
    depends_on:
      redis-test:
        condition: service_healthy
      user-management-test:
        condition: service_healthy
    networks:
      - ai-ninja-test
    volumes:
      - test_logs:/app/logs
      - ./storage/audio:/app/storage/audio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  conversation-engine-test:
    build:
      context: .
      dockerfile: services/conversation-engine/Dockerfile
      target: testing
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-test}
    container_name: ai-ninja-conversation-engine-test
    environment:
      FASTAPI_ENV: test
      PORT: 3003
      DATABASE_URL: postgresql://test:testpass@postgres-test:5432/ai_ninja_test
      REDIS_URL: redis://redis-test:6379
      USER_MANAGEMENT_URL: http://user-management-test:3005
      PROFILE_ANALYTICS_URL: http://profile-analytics-test:3004
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT:-mock}
      AZURE_OPENAI_KEY: ${AZURE_OPENAI_KEY:-mock-key}
      LOG_LEVEL: debug
    ports:
      - "3003:3003"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      user-management-test:
        condition: service_healthy
    networks:
      - ai-ninja-test
    volumes:
      - test_logs:/app/logs
      - ./ml/models:/app/ml/models
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  profile-analytics-test:
    build:
      context: .
      dockerfile: services/profile-analytics/Dockerfile
      target: testing
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-test}
    container_name: ai-ninja-profile-analytics-test
    environment:
      FASTAPI_ENV: test
      PORT: 3004
      DATABASE_URL: postgresql://test:testpass@postgres-test:5432/ai_ninja_test
      REDIS_URL: redis://redis-test:6379
      ML_MODEL_PATH: /app/ml/models
      ENABLE_ML_TRAINING: "false"
      LOG_LEVEL: debug
    ports:
      - "3004:3004"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - ai-ninja-test
    volumes:
      - test_logs:/app/logs
      - ./ml/models:/app/ml/models
      - ./storage/models:/app/storage/models
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  conversation-analyzer-test:
    build:
      context: .
      dockerfile: services/conversation-analyzer/Dockerfile
      target: testing
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-test}
    container_name: ai-ninja-conversation-analyzer-test
    environment:
      FASTAPI_ENV: test
      PORT: 3007
      DATABASE_URL: postgresql://test:testpass@postgres-test:5432/ai_ninja_test
      REDIS_URL: redis://redis-test:6379
      CONVERSATION_ENGINE_URL: http://conversation-engine-test:3003
      AZURE_SPEECH_KEY: ${AZURE_SPEECH_KEY:-mock-key}
      AZURE_SPEECH_REGION: ${AZURE_SPEECH_REGION:-eastus}
      LOG_LEVEL: debug
    ports:
      - "3007:3007"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      conversation-engine-test:
        condition: service_healthy
    networks:
      - ai-ninja-test
    volumes:
      - test_logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M

  # Testing Tools and Utilities
  test-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile.test-runner
    container_name: ai-ninja-test-runner
    environment:
      NODE_ENV: test
      DATABASE_URL: postgresql://test:testpass@postgres-test:5432/ai_ninja_test
      REDIS_URL: redis://redis-test:6379
      API_BASE_URL: http://user-management-test:3005
      WEBSOCKET_BASE_URL: ws://realtime-processor-test:3002
      TEST_TIMEOUT: 60000
    depends_on:
      - user-management-test
      - smart-whitelist-test
      - realtime-processor-test
      - conversation-engine-test
      - profile-analytics-test
      - conversation-analyzer-test
    networks:
      - ai-ninja-test
    volumes:
      - ./tests:/app/tests
      - ./reports:/app/reports
      - test_logs:/app/logs
    command: ["npm", "run", "test:all"]
    profiles:
      - test

  # Monitoring and Observability
  prometheus-test:
    image: prom/prometheus:latest
    container_name: ai-ninja-prometheus-test
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus-test.yml:/etc/prometheus/prometheus.yml
    networks:
      - ai-ninja-test
    profiles:
      - monitoring

  grafana-test:
    image: grafana/grafana:latest
    container_name: ai-ninja-grafana-test
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3001:3000"
    volumes:
      - ./config/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus-test
    networks:
      - ai-ninja-test
    profiles:
      - monitoring

  # Load Testing Service
  load-tester:
    build:
      context: .
      dockerfile: docker/Dockerfile.load-tester
    container_name: ai-ninja-load-tester
    environment:
      TARGET_ENVIRONMENT: test
      USER_MANAGEMENT_URL: http://user-management-test:3005
      SMART_WHITELIST_URL: http://smart-whitelist-test:3006
      REALTIME_PROCESSOR_URL: http://realtime-processor-test:3002
      CONVERSATION_ENGINE_URL: http://conversation-engine-test:3003
      PROFILE_ANALYTICS_URL: http://profile-analytics-test:3004
      LOAD_TEST_DURATION: 300
      CONCURRENT_USERS: 10
    depends_on:
      - user-management-test
      - smart-whitelist-test
      - realtime-processor-test
      - conversation-engine-test
      - profile-analytics-test
    networks:
      - ai-ninja-test
    volumes:
      - ./tests/load:/app/tests
      - ./reports/load:/app/reports
    profiles:
      - load-test

  # Mock External Services for Testing
  azure-mock:
    image: wiremock/wiremock:latest
    container_name: ai-ninja-azure-mock
    command: ["--port", "8080", "--global-response-templating"]
    ports:
      - "8080:8080"
    volumes:
      - ./tests/mocks/azure:/home/wiremock/mappings
    networks:
      - ai-ninja-test
    profiles:
      - mock

  # Database Administration
  pgadmin-test:
    image: dpage/pgadmin4:latest
    container_name: ai-ninja-pgadmin-test
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@test.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    depends_on:
      - postgres-test
    networks:
      - ai-ninja-test
    profiles:
      - admin

  # Redis Administration
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai-ninja-redis-commander
    environment:
      REDIS_HOSTS: test:redis-test:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis-test
    networks:
      - ai-ninja-test
    profiles:
      - admin