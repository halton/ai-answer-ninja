#!/bin/bash
# AI Answer Ninja - Database Seeding Script
# Load development and test data into database

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# ===========================================
# Configuration and Environment
# ===========================================

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"

# Database configuration
DB_HOST="${DB_HOST:-localhost}"
DB_PORT="${DB_PORT:-5432}"
DB_NAME="${DB_NAME:-ai_ninja_development}"
DB_USER="${DB_USER:-ai_ninja_app}"
DB_PASSWORD="${DB_PASSWORD:-}"
ENVIRONMENT="${ENVIRONMENT:-development}"

# Seed data configuration
SEED_DATA_DIR="${PROJECT_ROOT}/database/seeds"
LOG_DIR="${PROJECT_ROOT}/logs/database"
PGPASSWORD="${DB_PASSWORD}"
export PGPASSWORD

# ===========================================
# Logging Functions
# ===========================================

setup_logging() {
    mkdir -p "${LOG_DIR}"
    LOG_FILE="${LOG_DIR}/seed-database-$(date '+%Y%m%d_%H%M%S').log"
    exec 1> >(tee -a "${LOG_FILE}")
    exec 2> >(tee -a "${LOG_FILE}" >&2)
}

log_info() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] $*"
}

log_warn() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [WARN] $*" >&2
}

log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] $*" >&2
}

log_success() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] $*"
}

# ===========================================
# Utility Functions
# ===========================================

check_database_connection() {
    log_info "Checking database connection to ${DB_HOST}:${DB_PORT}/${DB_NAME}..."
    
    if psql -h "${DB_HOST}" -p "${DB_PORT}" -U "${DB_USER}" -d "${DB_NAME}" -c "SELECT 1" &> /dev/null; then
        log_success "Database connection successful"
        return 0
    else
        log_error "Database connection failed"
        return 1
    fi
}\n\ncheck_environment_safety() {\n    log_info \"Checking environment safety for ${ENVIRONMENT}...\"\n    \n    # Only allow seeding in development and test environments\n    case \"${ENVIRONMENT}\" in\n        \"development\"|\"dev\"|\"test\"|\"testing\")\n            log_success \"Environment ${ENVIRONMENT} is safe for seeding\"\n            return 0\n            ;;\n        \"staging\"|\"production\"|\"prod\")\n            log_error \"Seeding not allowed in ${ENVIRONMENT} environment\"\n            return 1\n            ;;\n        *)\n            log_warn \"Unknown environment ${ENVIRONMENT}, proceeding with caution\"\n            return 0\n            ;;\n    esac\n}\n\ncheck_database_name() {\n    log_info \"Verifying database name safety...\"\n    \n    # Check if database name indicates it's safe for seeding\n    if [[ \"${DB_NAME}\" =~ (dev|test|development|testing) ]]; then\n        log_success \"Database name ${DB_NAME} appears safe for seeding\"\n        return 0\n    elif [[ \"${DB_NAME}\" =~ (prod|production|staging) ]]; then\n        log_error \"Database name ${DB_NAME} suggests production/staging environment\"\n        return 1\n    else\n        log_warn \"Database name ${DB_NAME} doesn't clearly indicate environment\"\n        read -p \"Are you sure you want to proceed? (yes/no): \" confirm\n        if [[ \"${confirm}\" == \"yes\" ]]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\nget_database_stats() {\n    log_info \"Getting current database statistics...\"\n    \n    psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" -c \"\n        SELECT \n            schemaname,\n            tablename,\n            n_tup_ins as inserts,\n            n_tup_upd as updates,\n            n_tup_del as deletes,\n            n_live_tup as live_rows\n        FROM pg_stat_user_tables \n        WHERE n_live_tup > 0\n        ORDER BY n_live_tup DESC;\n    \"\n}\n\n# ===========================================\n# Seed Data Loading Functions\n# ===========================================\n\nload_basic_seed_data() {\n    log_info \"Loading basic seed data...\"\n    \n    local seed_file=\"${SEED_DATA_DIR}/development/01-sample-users.sql\"\n    \n    if [[ -f \"${seed_file}\" ]]; then\n        log_info \"Loading basic users from ${seed_file}...\"\n        \n        if psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" -f \"${seed_file}\"; then\n            log_success \"Basic seed data loaded successfully\"\n        else\n            log_error \"Failed to load basic seed data\"\n            return 1\n        fi\n    else\n        log_warn \"Basic seed file not found: ${seed_file}\"\n    fi\n}\n\nload_comprehensive_seed_data() {\n    log_info \"Loading comprehensive seed data...\"\n    \n    local seed_file=\"${SEED_DATA_DIR}/development/comprehensive-seed-data.sql\"\n    \n    if [[ -f \"${seed_file}\" ]]; then\n        log_info \"Loading comprehensive data from ${seed_file}...\"\n        \n        # Load with progress indication\n        if psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" \\\n              -f \"${seed_file}\" \\\n              --echo-queries \\\n              --echo-errors; then\n            log_success \"Comprehensive seed data loaded successfully\"\n        else\n            log_error \"Failed to load comprehensive seed data\"\n            return 1\n        fi\n    else\n        log_error \"Comprehensive seed file not found: ${seed_file}\"\n        return 1\n    fi\n}\n\nload_performance_test_data() {\n    log_info \"Loading performance test data...\"\n    \n    # Generate larger dataset for performance testing\n    local temp_file=\"/tmp/performance_seed_data.sql\"\n    \n    cat > \"${temp_file}\" << 'EOF'\n-- Performance test data generation\n\n-- Generate additional users\nINSERT INTO users (phone_number, name, personality, language_preference, timezone, preferences)\nSELECT \n    '+86-' || LPAD((1350000000 + generate_series(1, 1000))::text, 11, '0') as phone_number,\n    'TestUser_' || generate_series(1, 1000) as name,\n    (ARRAY['polite', 'direct', 'humorous', 'professional'])[floor(random() * 4 + 1)] as personality,\n    'zh-CN' as language_preference,\n    'Asia/Shanghai' as timezone,\n    '{}' as preferences\nWHERE NOT EXISTS (SELECT 1 FROM users WHERE name LIKE 'TestUser_%');\n\n-- Generate call records for performance testing\nINSERT INTO call_records (\n    user_id, caller_phone, call_type, call_status, start_time, end_time, \n    duration_seconds, response_time_ms, cache_hit_ratio, ai_model_version\n)\nSELECT \n    u.id,\n    '+86-400-' || LPAD(floor(random() * 9999 + 1000)::text, 4, '0') || '-' || LPAD(floor(random() * 9999 + 1000)::text, 4, '0'),\n    'incoming',\n    (ARRAY['completed', 'failed', 'completed', 'completed'])[floor(random() * 4 + 1)],\n    CURRENT_TIMESTAMP - (random() * interval '30 days'),\n    CURRENT_TIMESTAMP - (random() * interval '30 days') + (random() * interval '5 minutes'),\n    floor(random() * 300 + 10)::integer,\n    floor(random() * 2000 + 100)::integer,\n    random()::decimal(3,2),\n    'gpt-4-turbo'\nFROM users u\nWHERE u.name LIKE 'TestUser_%'\nCROSS JOIN generate_series(1, 5)\nLIMIT 5000;\n\n-- Generate conversations for some calls\nINSERT INTO conversations (\n    call_record_id, sequence_number, speaker, message_text, timestamp,\n    confidence_score, intent_category, emotion, processing_latency\n)\nSELECT \n    cr.id,\n    generate_series(1, floor(random() * 4 + 1)::integer),\n    (ARRAY['caller', 'ai'])[floor(random() * 2 + 1)],\n    'Test message ' || generate_series(1, 100),\n    cr.start_time + (generate_series(1, 4) * interval '10 seconds'),\n    random()::decimal(3,2),\n    (ARRAY['sales', 'inquiry', 'complaint', 'unknown'])[floor(random() * 4 + 1)],\n    (ARRAY['neutral', 'happy', 'frustrated', 'angry'])[floor(random() * 4 + 1)],\n    floor(random() * 1000 + 50)::integer\nFROM call_records cr\nWHERE cr.caller_phone LIKE '+86-400-%'\nAND random() < 0.3  -- Only 30% of calls have conversation records\nLIMIT 2000;\n\nRAISE NOTICE 'Performance test data generated';\nEOF\n\n    if psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" -f \"${temp_file}\"; then\n        log_success \"Performance test data loaded successfully\"\n        rm -f \"${temp_file}\"\n    else\n        log_error \"Failed to load performance test data\"\n        rm -f \"${temp_file}\"\n        return 1\n    fi\n}\n\nload_custom_seed_file() {\n    local seed_file=\"$1\"\n    \n    if [[ ! -f \"${seed_file}\" ]]; then\n        log_error \"Seed file not found: ${seed_file}\"\n        return 1\n    fi\n    \n    log_info \"Loading custom seed file: ${seed_file}\"\n    \n    if psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" -f \"${seed_file}\"; then\n        log_success \"Custom seed file loaded successfully\"\n    else\n        log_error \"Failed to load custom seed file\"\n        return 1\n    fi\n}\n\n# ===========================================\n# Data Validation Functions\n# ===========================================\n\nvalidate_seed_data() {\n    log_info \"Validating seed data integrity...\"\n    \n    local validation_errors=0\n    \n    # Check for required tables\n    local required_tables=(\"users\" \"smart_whitelists\" \"call_records\" \"conversations\" \"spam_profiles\")\n    \n    for table in \"${required_tables[@]}\"; do\n        local count\n        count=$(psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" \\\n                    -t -c \"SELECT COUNT(*) FROM ${table};\" | tr -d ' ')\n        \n        if [[ ${count} -gt 0 ]]; then\n            log_success \"✓ Table ${table}: ${count} records\"\n        else\n            log_error \"✗ Table ${table}: No records found\"\n            ((validation_errors++))\n        fi\n    done\n    \n    # Check for foreign key integrity\n    log_info \"Checking foreign key relationships...\"\n    \n    # Check orphaned call records\n    local orphaned_calls\n    orphaned_calls=$(psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" \\\n                         -t -c \"SELECT COUNT(*) FROM call_records cr LEFT JOIN users u ON cr.user_id = u.id WHERE u.id IS NULL;\" | tr -d ' ')\n    \n    if [[ ${orphaned_calls} -eq 0 ]]; then\n        log_success \"✓ No orphaned call records\"\n    else\n        log_error \"✗ Found ${orphaned_calls} orphaned call records\"\n        ((validation_errors++))\n    fi\n    \n    # Check orphaned conversations\n    local orphaned_conversations\n    orphaned_conversations=$(psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" \\\n                                 -t -c \"SELECT COUNT(*) FROM conversations c LEFT JOIN call_records cr ON c.call_record_id = cr.id WHERE cr.id IS NULL;\" | tr -d ' ')\n    \n    if [[ ${orphaned_conversations} -eq 0 ]]; then\n        log_success \"✓ No orphaned conversations\"\n    else\n        log_error \"✗ Found ${orphaned_conversations} orphaned conversations\"\n        ((validation_errors++))\n    fi\n    \n    # Check data quality\n    log_info \"Checking data quality...\"\n    \n    # Check for invalid phone numbers\n    local invalid_phones\n    invalid_phones=$(psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" \\\n                         -t -c \"SELECT COUNT(*) FROM users WHERE phone_number IS NULL OR length(phone_number) < 10;\" | tr -d ' ')\n    \n    if [[ ${invalid_phones} -eq 0 ]]; then\n        log_success \"✓ All users have valid phone numbers\"\n    else\n        log_warn \"⚠ Found ${invalid_phones} users with invalid phone numbers\"\n    fi\n    \n    # Summary\n    if [[ ${validation_errors} -eq 0 ]]; then\n        log_success \"All validation checks passed\"\n        return 0\n    else\n        log_error \"Validation failed with ${validation_errors} errors\"\n        return 1\n    fi\n}\n\ngenerate_data_summary() {\n    log_info \"Generating data summary report...\"\n    \n    local summary_file=\"${LOG_DIR}/seed-data-summary-$(date '+%Y%m%d_%H%M%S').txt\"\n    \n    {\n        echo \"AI Answer Ninja - Seed Data Summary\"\n        echo \"Generated: $(date)\"\n        echo \"Database: ${DB_HOST}:${DB_PORT}/${DB_NAME}\"\n        echo \"Environment: ${ENVIRONMENT}\"\n        echo \"===========================================\"\n        echo\n        \n        echo \"Table Statistics:\"\n        psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" -c \"\n            SELECT \n                schemaname,\n                tablename,\n                n_live_tup as row_count,\n                pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size\n            FROM pg_stat_user_tables \n            WHERE schemaname = 'public'\n            ORDER BY n_live_tup DESC;\n        \"\n        \n        echo\n        echo \"User Distribution:\"\n        psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" -c \"\n            SELECT \n                personality,\n                language_preference,\n                COUNT(*) as user_count\n            FROM users \n            GROUP BY personality, language_preference\n            ORDER BY user_count DESC;\n        \"\n        \n        echo\n        echo \"Call Statistics:\"\n        psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" -c \"\n            SELECT \n                call_status,\n                COUNT(*) as call_count,\n                ROUND(AVG(duration_seconds), 2) as avg_duration,\n                ROUND(AVG(response_time_ms), 2) as avg_response_time\n            FROM call_records \n            GROUP BY call_status\n            ORDER BY call_count DESC;\n        \"\n        \n        echo\n        echo \"Spam Profile Statistics:\"\n        psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" -c \"\n            SELECT \n                spam_category,\n                COUNT(*) as profile_count,\n                ROUND(AVG(risk_score), 2) as avg_risk_score,\n                ROUND(AVG(confidence_level), 2) as avg_confidence\n            FROM spam_profiles \n            GROUP BY spam_category\n            ORDER BY profile_count DESC;\n        \"\n        \n    } > \"${summary_file}\"\n    \n    log_success \"Data summary saved to: ${summary_file}\"\n    \n    # Display summary to console\n    echo\n    log_info \"=== SEED DATA SUMMARY ===\"\n    tail -n +7 \"${summary_file}\" | head -n 20\n    echo\n}\n\n# ===========================================\n# Clean and Reset Functions\n# ===========================================\n\nclean_existing_data() {\n    if [[ \"${ENVIRONMENT}\" != \"development\" && \"${ENVIRONMENT}\" != \"test\" ]]; then\n        log_error \"Data cleaning only allowed in development/test environments\"\n        return 1\n    fi\n    \n    log_warn \"Cleaning existing data from ${DB_NAME}...\"\n    \n    read -p \"Are you sure you want to delete all data? (yes/no): \" confirm\n    if [[ \"${confirm}\" != \"yes\" ]]; then\n        log_info \"Data cleaning cancelled\"\n        return 1\n    fi\n    \n    # Truncate tables in dependency order\n    psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" << 'EOF'\nSET session_replication_role = replica;\nTRUNCATE TABLE user_spam_interactions CASCADE;\nTRUNCATE TABLE conversations CASCADE;\nTRUNCATE TABLE call_records CASCADE;\nTRUNCATE TABLE smart_whitelists CASCADE;\nTRUNCATE TABLE user_configs CASCADE;\nTRUNCATE TABLE global_configs CASCADE;\nTRUNCATE TABLE spam_profiles CASCADE;\nTRUNCATE TABLE users CASCADE;\nSET session_replication_role = DEFAULT;\nEOF\n    \n    if [[ $? -eq 0 ]]; then\n        log_success \"Existing data cleaned successfully\"\n    else\n        log_error \"Failed to clean existing data\"\n        return 1\n    fi\n}\n\nreset_sequences() {\n    log_info \"Resetting database sequences...\"\n    \n    # Reset any sequences to ensure consistent IDs\n    psql -h \"${DB_HOST}\" -p \"${DB_PORT}\" -U \"${DB_USER}\" -d \"${DB_NAME}\" << 'EOF'\n-- Reset sequences if they exist\nDO $$\nDECLARE\n    seq_record RECORD;\nBEGIN\n    FOR seq_record IN \n        SELECT sequence_name FROM information_schema.sequences \n        WHERE sequence_schema = 'public'\n    LOOP\n        EXECUTE 'ALTER SEQUENCE ' || seq_record.sequence_name || ' RESTART WITH 1';\n    END LOOP;\nEND $$;\nEOF\n    \n    log_success \"Database sequences reset\"\n}\n\n# ===========================================\n# Main Seeding Function\n# ===========================================\n\nmain() {\n    local operation=\"${1:-comprehensive}\"\n    local custom_file=\"${2:-}\"\n    \n    # Setup logging\n    setup_logging\n    \n    log_info \"Starting database seeding for AI Answer Ninja\"\n    log_info \"Environment: ${ENVIRONMENT}\"\n    log_info \"Database: ${DB_HOST}:${DB_PORT}/${DB_NAME}\"\n    log_info \"Operation: ${operation}\"\n    \n    # Safety checks\n    if ! check_environment_safety; then\n        exit 1\n    fi\n    \n    if ! check_database_name; then\n        exit 1\n    fi\n    \n    if ! check_database_connection; then\n        exit 1\n    fi\n    \n    case \"${operation}\" in\n        \"basic\")\n            log_info \"Loading basic seed data only...\"\n            load_basic_seed_data\n            validate_seed_data\n            generate_data_summary\n            ;;\n            \n        \"comprehensive\")\n            log_info \"Loading comprehensive seed data...\"\n            load_comprehensive_seed_data\n            validate_seed_data\n            generate_data_summary\n            ;;\n            \n        \"performance\")\n            log_info \"Loading performance test data...\"\n            load_comprehensive_seed_data\n            load_performance_test_data\n            validate_seed_data\n            generate_data_summary\n            ;;\n            \n        \"custom\")\n            if [[ -z \"${custom_file}\" ]]; then\n                log_error \"Custom file path required for custom operation\"\n                exit 1\n            fi\n            log_info \"Loading custom seed file: ${custom_file}\"\n            load_custom_seed_file \"${custom_file}\"\n            validate_seed_data\n            ;;\n            \n        \"clean\")\n            log_info \"Cleaning existing data...\"\n            clean_existing_data\n            reset_sequences\n            ;;\n            \n        \"reset\")\n            log_info \"Resetting database with fresh seed data...\"\n            clean_existing_data\n            reset_sequences\n            load_comprehensive_seed_data\n            validate_seed_data\n            generate_data_summary\n            ;;\n            \n        \"validate\")\n            log_info \"Validating existing seed data...\"\n            validate_seed_data\n            generate_data_summary\n            ;;\n            \n        \"summary\")\n            log_info \"Generating data summary...\"\n            get_database_stats\n            generate_data_summary\n            ;;\n            \n        \"help\")\n            cat << EOF\nAI Answer Ninja - Database Seeding Script\n\nUsage: $0 <operation> [custom_file]\n\nOperations:\n  basic         - Load basic seed data only\n  comprehensive - Load comprehensive seed data (default)\n  performance   - Load comprehensive + performance test data\n  custom <file> - Load custom seed file\n  clean         - Clean all existing data (dev/test only)\n  reset         - Clean and reload comprehensive data\n  validate      - Validate existing seed data\n  summary       - Generate data summary report\n  help          - Show this help message\n\nEnvironment Variables:\n  ENVIRONMENT   - Environment name (development/test/staging/production)\n  DB_HOST       - Database host (default: localhost)\n  DB_PORT       - Database port (default: 5432)\n  DB_NAME       - Database name (default: ai_ninja_development)\n  DB_USER       - Database user (default: ai_ninja_app)\n  DB_PASSWORD   - Database password\n\nExamples:\n  $0 comprehensive                    # Load full seed data\n  $0 performance                      # Load with performance test data\n  $0 custom /path/to/custom.sql      # Load custom seed file\n  $0 reset                           # Clean and reload\n  ENVIRONMENT=test $0 basic          # Load basic data in test env\n\nSafety:\n  - Only allows seeding in development/test environments\n  - Requires confirmation for destructive operations\n  - Validates data integrity after loading\n  - Generates comprehensive reports\n\nEOF\n            ;;\n            \n        *)\n            log_error \"Unknown operation: ${operation}\"\n            echo \"Use '$0 help' for usage information\"\n            exit 1\n            ;;\n    esac\n    \n    log_success \"Database seeding operation '${operation}' completed successfully\"\n}\n\n# Handle script interruption\ntrap 'log_error \"Script interrupted by user\"; exit 130' INT TERM\n\n# Run main function with all arguments\nmain \"$@\"\n"}