# AI Answer Ninja - Nginx Configuration
# API Gateway and Load Balancer

worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging Configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    
    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/json
        application/javascript
        application/xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    
    # Upstream Definitions
    include /etc/nginx/conf.d/upstreams.conf;

    # Health Check Endpoint
    server {
        listen 80 default_server;
        server_name _;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect HTTP to HTTPS in production
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS Server (Main API Gateway)
    server {
        listen 443 ssl http2 default_server;
        server_name ai-ninja.local;

        # SSL Configuration (self-signed for development)
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security Headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Phone Gateway Service
        location /api/phone/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://phone-gateway/;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # Realtime Processor Service  
        location /api/realtime/ {
            limit_req zone=api burst=200 nodelay;
            proxy_pass http://realtime-processor/;
            include /etc/nginx/conf.d/proxy.conf;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Conversation Engine Service
        location /api/conversation/ {
            limit_req zone=api burst=100 nodelay;
            proxy_pass http://conversation-engine/;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # Profile Analytics Service
        location /api/analytics/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://profile-analytics/;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # User Management Service
        location /api/auth/ {
            limit_req zone=auth burst=10 nodelay;
            proxy_pass http://user-management/api/v1/auth/;
            include /etc/nginx/conf.d/proxy.conf;
        }
        
        location /api/users/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://user-management/api/v1/users/;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # Smart Whitelist Service
        location /api/whitelist/ {
            limit_req zone=api burst=100 nodelay;
            proxy_pass http://smart-whitelist/api/v1/whitelist/;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # Configuration Service
        location /api/config/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://configuration/api/v1/config/;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # Storage Service
        location /api/storage/ {
            limit_req zone=api burst=30 nodelay;
            client_max_body_size 100M;
            proxy_pass http://storage/api/v1/storage/;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # Monitoring Service
        location /api/monitoring/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://monitoring/api/v1/monitoring/;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # Prometheus Metrics
        location /metrics {
            proxy_pass http://monitoring:9090/metrics;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # Grafana Dashboard
        location /dashboard/ {
            proxy_pass http://monitoring:3000/;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # Health checks for all services
        location /health/services {
            proxy_pass http://monitoring/api/v1/monitoring/health;
            include /etc/nginx/conf.d/proxy.conf;
        }

        # Static assets and admin UI (if needed)
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
    }

    # Status page for monitoring
    server {
        listen 8080;
        server_name localhost;

        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.20.0.0/16;  # Docker network
            deny all;
        }
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}