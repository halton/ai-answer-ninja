# Production Docker Compose for AI Answer Ninja Admin Panel

services:
  admin-panel:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_VERSION: ${BUILD_VERSION:-latest}
        BUILD_TIME: ${BUILD_TIME:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
    image: ai-ninja-admin:${BUILD_VERSION:-latest}
    container_name: ai-ninja-admin-panel
    restart: unless-stopped
    ports:
      - "${ADMIN_PANEL_PORT:-80}:80"
    environment:
      # Backend URLs (will be substituted in nginx config)
      - API_BACKEND_URL=${API_BACKEND_URL:-http://api-gateway:3000}
      - WEBSOCKET_BACKEND_URL=${WEBSOCKET_BACKEND_URL:-http://realtime-processor:3002}
    volumes:
      # Custom nginx configuration (optional)
      - ./docker/custom-nginx.conf:/etc/nginx/conf.d/custom.conf:ro
      # SSL certificates (if using HTTPS)
      - ./certs:/etc/nginx/certs:ro
      # Logs
      - nginx-logs:/var/log/nginx
    networks:
      - ai-ninja-network
    depends_on:
      - api-gateway
      - realtime-processor
    healthcheck:
      test: ["/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        order: stop-first
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin-panel.rule=Host(`admin.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.admin-panel.tls=true"
      - "traefik.http.routers.admin-panel.tls.certresolver=letsencrypt"
      - "traefik.http.services.admin-panel.loadbalancer.server.port=80"
      - "traefik.http.middlewares.admin-panel-auth.basicauth.users=${BASIC_AUTH_USERS:-}"

  # Nginx for SSL termination and load balancing (optional)
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: ai-ninja-nginx-proxy
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./docker/nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx-proxy-logs:/var/log/nginx
    networks:
      - ai-ninja-network
    depends_on:
      - admin-panel
    profiles:
      - with-proxy

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: ai-ninja-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis-data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ai-ninja-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

  # API Gateway (mock for demo)
  api-gateway:
    image: nginx:alpine
    container_name: ai-ninja-api-gateway
    restart: unless-stopped
    ports:
      - "${API_GATEWAY_PORT:-3000}:80"
    volumes:
      - ./docker/api-gateway-mock.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - ai-ninja-network
    profiles:
      - demo

  # Realtime Processor (mock for demo)
  realtime-processor:
    image: nginx:alpine
    container_name: ai-ninja-realtime-processor
    restart: unless-stopped
    ports:
      - "${REALTIME_PROCESSOR_PORT:-3002}:80"
    volumes:
      - ./docker/realtime-mock.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - ai-ninja-network
    profiles:
      - demo

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-ninja-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-ninja-network
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-ninja-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ai-ninja-network
    profiles:
      - monitoring

volumes:
  nginx-logs:
    driver: local
  nginx-proxy-logs:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  ai-ninja-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16