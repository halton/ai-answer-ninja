import React, { useState, useEffect } from 'react'
import {
  Card,
  Table,
  Button,
  Input,
  Select,
  Space,
  Tag,
  Typography,
  Modal,
  Form,
  message,
  Popconfirm,
  Badge,
  Tooltip,
  Switch,
  Alert,
  Row,
  Col,
  Statistic,
  Upload,
  Progress,
  Divider
} from 'antd'
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  SearchOutlined,
  ImportOutlined,
  ExportOutlined,
  BulkOutlined,
  UserOutlined,
  PhoneOutlined,
  SafetyCertificateOutlined,
  RobotOutlined,
  UploadOutlined,
  DownloadOutlined
} from '@ant-design/icons'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import dayjs from 'dayjs'
import type { ColumnsType, TableRowSelection } from 'antd/es/table'
import type { UploadFile, UploadProps } from 'antd/es/upload'

const { Option } = Select
const { Text, Title } = Typography
const { TextArea } = Input

// 白名单条目数据类型
interface WhitelistEntry {
  id: string
  userId: string
  userName: string
  contactPhone: string
  contactName?: string
  whitelistType: 'manual' | 'auto' | 'temporary'
  confidenceScore: number // 0-1
  isActive: boolean
  expiresAt?: string
  tags?: string[]
  notes?: string
  createdAt: string
  updatedAt: string
  callCount: number
  lastCallTime?: string
}

// 智能推荐数据类型
interface SmartRecommendation {
  id: string
  phone: string
  name?: string
  reason: string
  confidence: number
  callHistory: {
    count: number
    avgDuration: number
    lastCall: string
  }
  isProcessing: boolean
}

const WhitelistManagement: React.FC = () => {
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([])
  const [modalVisible, setModalVisible] = useState(false)
  const [editingEntry, setEditingEntry] = useState<WhitelistEntry | null>(null)
  const [importModalVisible, setImportModalVisible] = useState(false)
  const [smartRecommendations, setSmartRecommendations] = useState<SmartRecommendation[]>([])
  const [form] = Form.useForm()
  const queryClient = useQueryClient()

  // 查询白名单数据
  const { data: whitelistData, isLoading } = useQuery({
    queryKey: ['whitelist'],
    queryFn: async () => {
      // 模拟API调用
      await new Promise(resolve => setTimeout(resolve, 1000))
      return {
        entries: generateMockWhitelistEntries(),
        stats: {
          totalEntries: 45,
          activeEntries: 42,
          autoGenerated: 18,
          temporaryEntries: 3
        }
      }
    }
  })

  // 智能推荐查询
  const { data: recommendationsData } = useQuery({
    queryKey: ['smartRecommendations'],
    queryFn: async () => {
      await new Promise(resolve => setTimeout(resolve, 800))
      return generateMockRecommendations()
    }
  })

  // 添加/编辑白名单条目
  const addWhitelistMutation = useMutation({
    mutationFn: async (data: Partial<WhitelistEntry>) => {
      await new Promise(resolve => setTimeout(resolve, 1000))
      return data
    },
    onSuccess: () => {
      message.success(editingEntry ? '编辑成功' : '添加成功')
      setModalVisible(false)
      setEditingEntry(null)
      form.resetFields()
      queryClient.invalidateQueries({ queryKey: ['whitelist'] })
    }
  })

  // 删除白名单条目
  const deleteWhitelistMutation = useMutation({
    mutationFn: async (id: string) => {
      await new Promise(resolve => setTimeout(resolve, 500))
      return id
    },
    onSuccess: () => {
      message.success('删除成功')
      queryClient.invalidateQueries({ queryKey: ['whitelist'] })
    }
  })

  // 批量操作
  const batchOperationMutation = useMutation({
    mutationFn: async ({ action, ids }: { action: string, ids: string[] }) => {
      await new Promise(resolve => setTimeout(resolve, 1000))
      return { action, ids }
    },
    onSuccess: (data) => {
      message.success(`批量${data.action}成功`)
      setSelectedRowKeys([])
      queryClient.invalidateQueries({ queryKey: ['whitelist'] })
    }
  })

  // 白名单类型配置
  const whitelistTypeConfig = {
    manual: { label: '手动添加', color: 'blue', icon: <UserOutlined /> },
    auto: { label: 'AI推荐', color: 'green', icon: <RobotOutlined /> },
    temporary: { label: '临时白名单', color: 'orange', icon: <SafetyCertificateOutlined /> }
  }

  // 表格列定义
  const columns: ColumnsType<WhitelistEntry> = [
    {
      title: '联系人信息',
      dataIndex: 'contactPhone',
      key: 'contactInfo',
      width: 200,
      render: (phone: string, record: WhitelistEntry) => (
        <Space direction="vertical" size="small">
          <div>
            <Text strong>{record.contactName || '未知联系人'}</Text>
            {record.tags && record.tags.length > 0 && (
              <div style={{ marginTop: 4 }}>
                {record.tags.map(tag => (
                  <Tag key={tag} size="small">{tag}</Tag>
                ))}
              </div>
            )}
          </div>
          <Text type="secondary" style={{ fontSize: '12px' }}>
            <PhoneOutlined style={{ marginRight: 4 }} />
            {phone}
          </Text>
        </Space>
      )
    },
    {
      title: '所属用户',
      dataIndex: 'userName',
      key: 'userName',
      width: 120,
      render: (name: string, record: WhitelistEntry) => (
        <Tooltip title={`用户ID: ${record.userId}`}>
          <Text>{name}</Text>
        </Tooltip>
      )
    },
    {
      title: '类型',
      dataIndex: 'whitelistType',
      key: 'whitelistType',
      width: 120,
      filters: Object.entries(whitelistTypeConfig).map(([key, config]) => ({
        text: config.label,
        value: key
      })),
      render: (type: string, record: WhitelistEntry) => {
        const config = whitelistTypeConfig[type as keyof typeof whitelistTypeConfig]
        return (
          <Space>
            <Tag color={config.color} icon={config.icon}>
              {config.label}
            </Tag>
            {type === 'auto' && record.confidenceScore && (
              <Progress
                percent={Math.round(record.confidenceScore * 100)}
                size="small"
                showInfo={false}
                strokeWidth={4}
                strokeColor="#52c41a"
              />
            )}
          </Space>
        )
      }
    },
    {
      title: '状态',
      dataIndex: 'isActive',
      key: 'isActive',
      width: 80,
      render: (isActive: boolean, record: WhitelistEntry) => {
        // 检查是否过期
        const isExpired = record.expiresAt && dayjs(record.expiresAt).isBefore(dayjs())
        
        if (isExpired) {
          return <Badge status="default" text="已过期" />
        }
        
        return (
          <Badge 
            status={isActive ? 'success' : 'default'} 
            text={isActive ? '启用' : '禁用'} 
          />
        )
      }
    },
    {
      title: '通话统计',
      dataIndex: 'callCount',
      key: 'callCount',
      width: 100,
      sorter: true,
      render: (count: number, record: WhitelistEntry) => (
        <Space direction="vertical" size="small">
          <Text strong>{count} 次</Text>
          {record.lastCallTime && (
            <Text type="secondary" style={{ fontSize: '12px' }}>
              {dayjs(record.lastCallTime).fromNow()}
            </Text>
          )}
        </Space>
      )
    },
    {
      title: '创建时间',
      dataIndex: 'createdAt',
      key: 'createdAt',
      width: 120,
      sorter: true,
      render: (time: string) => (
        <Text>{dayjs(time).format('MM-DD HH:mm')}</Text>
      )
    },
    {
      title: '过期时间',
      dataIndex: 'expiresAt',
      key: 'expiresAt',
      width: 120,
      render: (time?: string) => {
        if (!time) return <Text type="secondary">永久</Text>
        
        const isExpired = dayjs(time).isBefore(dayjs())
        return (
          <Text type={isExpired ? 'danger' : 'secondary'}>
            {dayjs(time).format('MM-DD HH:mm')}
          </Text>
        )
      }
    },
    {
      title: '操作',
      key: 'actions',
      width: 150,
      render: (_, record: WhitelistEntry) => (
        <Space wrap>
          <Tooltip title="编辑">
            <Button
              type="text"
              icon={<EditOutlined />}
              onClick={() => handleEdit(record)}
            />
          </Tooltip>
          <Tooltip title="删除">
            <Popconfirm
              title="确定要删除这个白名单条目吗？"
              onConfirm={() => handleDelete(record.id)}
              okText="确定"
              cancelText="取消"
            >
              <Button
                type="text"
                danger
                icon={<DeleteOutlined />}
              />
            </Popconfirm>
          </Tooltip>
        </Space>
      )
    }
  ]

  // 表格行选择配置
  const rowSelection: TableRowSelection<WhitelistEntry> = {
    selectedRowKeys,
    onChange: setSelectedRowKeys,
    getCheckboxProps: (record: WhitelistEntry) => ({
      disabled: false
    })
  }

  // 处理添加
  const handleAdd = () => {
    setEditingEntry(null)
    form.resetFields()
    setModalVisible(true)
  }

  // 处理编辑
  const handleEdit = (record: WhitelistEntry) => {
    setEditingEntry(record)
    form.setFieldsValue({
      ...record,
      expiresAt: record.expiresAt ? dayjs(record.expiresAt) : undefined
    })
    setModalVisible(true)
  }

  // 处理删除
  const handleDelete = (id: string) => {
    deleteWhitelistMutation.mutate(id)
  }

  // 处理表单提交
  const handleSubmit = async () => {
    try {
      const values = await form.validateFields()
      const data = {
        ...values,
        expiresAt: values.expiresAt ? values.expiresAt.toISOString() : undefined,
        id: editingEntry?.id
      }
      addWhitelistMutation.mutate(data)
    } catch (error) {
      console.error('表单验证失败:', error)
    }
  }

  // 批量操作
  const handleBatchOperation = (action: string) => {
    if (selectedRowKeys.length === 0) {
      message.warning('请选择要操作的条目')
      return
    }

    batchOperationMutation.mutate({
      action,
      ids: selectedRowKeys as string[]
    })
  }

  // 处理智能推荐
  const handleAcceptRecommendation = (recommendation: SmartRecommendation) => {
    const data = {
      contactPhone: recommendation.phone,
      contactName: recommendation.name,
      whitelistType: 'auto',
      confidenceScore: recommendation.confidence,
      isActive: true,
      notes: `AI推荐: ${recommendation.reason}`
    }
    addWhitelistMutation.mutate(data)
  }

  // 文件上传配置
  const uploadProps: UploadProps = {
    name: 'file',
    action: '/api/whitelist/import',
    headers: {
      authorization: 'Bearer ' + localStorage.getItem('token')
    },
    beforeUpload: (file) => {
      const isCSV = file.type === 'text/csv' || file.name.endsWith('.csv')
      if (!isCSV) {
        message.error('只能上传 CSV 格式的文件！')
      }
      return isCSV
    },
    onChange: (info) => {
      if (info.file.status === 'done') {
        message.success('导入成功')
        setImportModalVisible(false)
        queryClient.invalidateQueries({ queryKey: ['whitelist'] })
      } else if (info.file.status === 'error') {
        message.error('导入失败')
      }
    }
  }

  // 导出白名单
  const handleExport = () => {
    const link = document.createElement('a')
    link.href = '/api/whitelist/export'
    link.download = `whitelist_${dayjs().format('YYYY-MM-DD')}.csv`
    link.click()
  }

  return (
    <div className="whitelist-management">
      {/* 统计卡片 */}
      <Row gutter={16} style={{ marginBottom: 16 }}>
        <Col span={6}>
          <Card>
            <Statistic
              title="白名单总数"
              value={whitelistData?.stats.totalEntries || 0}
              prefix={<SafetyCertificateOutlined />}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="启用中"
              value={whitelistData?.stats.activeEntries || 0}
              prefix={<UserOutlined />}
              valueStyle={{ color: '#3f8600' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="AI推荐"
              value={whitelistData?.stats.autoGenerated || 0}
              prefix={<RobotOutlined />}
              valueStyle={{ color: '#1890ff' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="临时白名单"
              value={whitelistData?.stats.temporaryEntries || 0}
              prefix={<SafetyCertificateOutlined />}
              valueStyle={{ color: '#faad14' }}
            />
          </Card>
        </Col>
      </Row>

      {/* 智能推荐 */}
      {recommendationsData && recommendationsData.length > 0 && (
        <Card title="智能推荐" style={{ marginBottom: 16 }}>
          <Alert
            message="AI发现了一些可能需要加入白名单的联系人"
            description="基于通话记录和用户行为分析，以下联系人建议加入白名单："
            type="info"
            showIcon
            style={{ marginBottom: 16 }}
          />
          <Row gutter={[16, 16]}>
            {recommendationsData.slice(0, 3).map(rec => (
              <Col span={8} key={rec.id}>
                <Card size="small">
                  <Space direction="vertical" style={{ width: '100%' }}>
                    <div>
                      <Text strong>{rec.name || rec.phone}</Text>
                      <Tag color="blue" style={{ marginLeft: 8 }}>
                        置信度 {Math.round(rec.confidence * 100)}%
                      </Tag>
                    </div>
                    <Text type="secondary">{rec.reason}</Text>
                    <Text type="secondary" style={{ fontSize: '12px' }}>
                      通话 {rec.callHistory.count} 次，平均时长 {rec.callHistory.avgDuration}秒
                    </Text>
                    <Space>
                      <Button
                        type="primary"
                        size="small"
                        onClick={() => handleAcceptRecommendation(rec)}
                        loading={rec.isProcessing}
                      >
                        接受推荐
                      </Button>
                      <Button size="small">忽略</Button>
                    </Space>
                  </Space>
                </Card>
              </Col>
            ))}
          </Row>
        </Card>
      )}

      {/* 操作栏 */}
      <Card style={{ marginBottom: 16 }}>
        <Space wrap style={{ width: '100%', justifyContent: 'space-between' }}>
          <Space wrap>
            <Button type="primary" icon={<PlusOutlined />} onClick={handleAdd}>
              添加白名单
            </Button>
            <Button
              icon={<ImportOutlined />}
              onClick={() => setImportModalVisible(true)}
            >
              批量导入
            </Button>
            <Button icon={<ExportOutlined />} onClick={handleExport}>
              导出白名单
            </Button>
          </Space>
          
          <Space wrap>
            <Input.Search
              placeholder="搜索电话号码或联系人"
              style={{ width: 200 }}
              allowClear
            />
            <Select placeholder="白名单类型" style={{ width: 120 }} allowClear>
              {Object.entries(whitelistTypeConfig).map(([key, config]) => (
                <Option key={key} value={key}>{config.label}</Option>
              ))}
            </Select>
          </Space>
        </Space>

        {selectedRowKeys.length > 0 && (
          <>
            <Divider />
            <Space wrap>
              <Text>已选择 {selectedRowKeys.length} 项</Text>
              <Button
                icon={<BulkOutlined />}
                onClick={() => handleBatchOperation('enable')}
                loading={batchOperationMutation.isPending}
              >
                批量启用
              </Button>
              <Button
                onClick={() => handleBatchOperation('disable')}
                loading={batchOperationMutation.isPending}
              >
                批量禁用
              </Button>
              <Popconfirm
                title="确定要删除选中的白名单条目吗？"
                onConfirm={() => handleBatchOperation('delete')}
                okText="确定"
                cancelText="取消"
              >
                <Button
                  danger
                  loading={batchOperationMutation.isPending}
                >
                  批量删除
                </Button>
              </Popconfirm>
            </Space>
          </>
        )}
      </Card>

      {/* 白名单表格 */}
      <Card>
        <Table<WhitelistEntry>
          columns={columns}
          dataSource={whitelistData?.entries || []}
          loading={isLoading}
          rowKey="id"
          rowSelection={rowSelection}
          pagination={{
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条，共 ${total} 条`
          }}
          scroll={{ x: 1200 }}
        />
      </Card>

      {/* 添加/编辑模态框 */}
      <Modal
        title={editingEntry ? '编辑白名单' : '添加白名单'}
        open={modalVisible}
        onOk={handleSubmit}
        onCancel={() => {
          setModalVisible(false)
          setEditingEntry(null)
          form.resetFields()
        }}
        confirmLoading={addWhitelistMutation.isPending}
        width={600}
      >
        <Form form={form} layout="vertical">
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="contactPhone"
                label="电话号码"
                rules={[
                  { required: true, message: '请输入电话号码' },
                  { pattern: /^1[3-9]\d{9}$/, message: '请输入正确的手机号码' }
                ]}
              >
                <Input placeholder="请输入11位手机号码" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item name="contactName" label="联系人姓名">
                <Input placeholder="请输入联系人姓名" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="whitelistType"
                label="白名单类型"
                rules={[{ required: true, message: '请选择白名单类型' }]}
              >
                <Select placeholder="请选择白名单类型">
                  {Object.entries(whitelistTypeConfig).map(([key, config]) => (
                    <Option key={key} value={key}>
                      {config.icon} {config.label}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item name="isActive" label="状态" valuePropName="checked" initialValue={true}>
                <Switch checkedChildren="启用" unCheckedChildren="禁用" />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item name="expiresAt" label="过期时间">
            <Input placeholder="留空表示永久有效" />
          </Form.Item>

          <Form.Item name="tags" label="标签">
            <Select mode="tags" placeholder="输入标签，按回车添加">
              <Option value="家人">家人</Option>
              <Option value="朋友">朋友</Option>
              <Option value="同事">同事</Option>
              <Option value="客户">客户</Option>
            </Select>
          </Form.Item>

          <Form.Item name="notes" label="备注">
            <TextArea rows={3} placeholder="添加备注信息..." />
          </Form.Item>
        </Form>
      </Modal>

      {/* 批量导入模态框 */}
      <Modal
        title="批量导入白名单"
        open={importModalVisible}
        onCancel={() => setImportModalVisible(false)}
        footer={[
          <Button key="download" icon={<DownloadOutlined />}>
            下载模板
          </Button>,
          <Button key="cancel" onClick={() => setImportModalVisible(false)}>
            取消
          </Button>
        ]}
      >
        <Space direction="vertical" style={{ width: '100%' }}>
          <Alert
            message="导入说明"
            description="请上传CSV格式的文件，包含以下列：电话号码、联系人姓名、白名单类型、备注"
            type="info"
            showIcon
          />
          <Upload.Dragger {...uploadProps}>
            <p className="ant-upload-drag-icon">
              <UploadOutlined />
            </p>
            <p className="ant-upload-text">点击或拖拽文件到此区域上传</p>
            <p className="ant-upload-hint">支持 CSV 格式文件</p>
          </Upload.Dragger>
        </Space>
      </Modal>
    </div>
  )
}

// 生成模拟白名单数据
function generateMockWhitelistEntries(): WhitelistEntry[] {
  const mockData: WhitelistEntry[] = []
  const whitelistTypes = ['manual', 'auto', 'temporary']
  const tags = ['家人', '朋友', '同事', '客户', '重要联系人']
  const names = ['张三', '李四', '王五', '赵六', '钱七', '孙八', '周九', '吴十']

  for (let i = 0; i < 20; i++) {
    const whitelistType = whitelistTypes[Math.floor(Math.random() * whitelistTypes.length)]
    const createdAt = dayjs().subtract(Math.floor(Math.random() * 30), 'day')
    const expiresAt = whitelistType === 'temporary' 
      ? createdAt.add(Math.floor(Math.random() * 30) + 1, 'day').toISOString()
      : undefined

    mockData.push({
      id: `whitelist_${i + 1}`,
      userId: `user_${Math.floor(Math.random() * 10) + 1}`,
      userName: `用户${Math.floor(Math.random() * 10) + 1}`,
      contactPhone: `138${Math.floor(Math.random() * 100000000).toString().padStart(8, '0')}`,
      contactName: Math.random() > 0.3 ? names[Math.floor(Math.random() * names.length)] : undefined,
      whitelistType: whitelistType as any,
      confidenceScore: whitelistType === 'auto' ? Math.random() * 0.4 + 0.6 : 1,
      isActive: Math.random() > 0.1,
      expiresAt,
      tags: Math.random() > 0.5 ? [tags[Math.floor(Math.random() * tags.length)]] : undefined,
      notes: Math.random() > 0.6 ? '重要联系人，请勿拦截' : undefined,
      createdAt: createdAt.toISOString(),
      updatedAt: createdAt.toISOString(),
      callCount: Math.floor(Math.random() * 20) + 1,
      lastCallTime: Math.random() > 0.3 ? dayjs().subtract(Math.floor(Math.random() * 7), 'day').toISOString() : undefined
    })
  }

  return mockData.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
}

// 生成模拟推荐数据
function generateMockRecommendations(): SmartRecommendation[] {
  const reasons = [
    '频繁通话且通话时长较长',
    '用户主动呼出多次',
    '通话时间规律，疑似重要联系人',
    '曾经手动接听过该号码'
  ]

  return Array.from({ length: 5 }, (_, i) => ({
    id: `rec_${i + 1}`,
    phone: `139${Math.floor(Math.random() * 100000000).toString().padStart(8, '0')}`,
    name: Math.random() > 0.5 ? `推荐联系人${i + 1}` : undefined,
    reason: reasons[Math.floor(Math.random() * reasons.length)],
    confidence: Math.random() * 0.3 + 0.7,
    callHistory: {
      count: Math.floor(Math.random() * 10) + 3,
      avgDuration: Math.floor(Math.random() * 180) + 60,
      lastCall: dayjs().subtract(Math.floor(Math.random() * 3), 'day').toISOString()
    },
    isProcessing: false
  }))
}

export default WhitelistManagement