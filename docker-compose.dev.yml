version: '3.8'

services:
  # ===========================================
  # Infrastructure Services
  # ===========================================
  
  postgres:
    image: postgres:15-alpine
    container_name: ai-ninja-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=ai_ninja
    networks:
      - ai-ninja-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/schemas:/schemas
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ai-ninja-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - ai-ninja-network
    volumes:
      - redis_data:/data
      - ./services/realtime-processor/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ===========================================
  # Available Microservices (Development Mode)
  # ===========================================

  realtime-processor:
    build:
      context: ./services/realtime-processor
      dockerfile: Dockerfile
      target: development
    container_name: ai-ninja-realtime-processor
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - AZURE_SPEECH_REGION=${AZURE_SPEECH_REGION}
      - AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/ai_ninja
      - DEBUG=ai-ninja:*
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-ninja-network
    volumes:
      - ./services/realtime-processor/src:/app/src
      - /app/node_modules
    restart: unless-stopped
    command: npm run dev

  conversation-engine:
    build:
      context: ./services/conversation-engine
      dockerfile: Dockerfile
      target: development
    container_name: ai-ninja-conversation-engine
    ports:
      - "3003:3003"
    environment:
      - PYTHON_ENV=${NODE_ENV:-development}
      - AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/ai_ninja
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-ninja-network
    volumes:
      - ./services/conversation-engine:/app
    restart: unless-stopped

  user-management:
    build:
      context: ./services/user-management
      dockerfile: Dockerfile
      target: development
    container_name: ai-ninja-user-management
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/ai_ninja
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - DEBUG=ai-ninja:*
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-ninja-network
    volumes:
      - ./services/user-management/src:/app/src
      - /app/node_modules
    restart: unless-stopped
    command: npm run dev

  smart-whitelist:
    build:
      context: ./services/smart-whitelist
      dockerfile: Dockerfile
    container_name: ai-ninja-smart-whitelist
    ports:
      - "3006:3006"
    environment:
      - ENVIRONMENT=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/ai_ninja
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-ninja-network
    restart: unless-stopped

  # ===========================================
  # Development Tools
  # ===========================================

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai-ninja-pgadmin
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@ai-ninja.local
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
    networks:
      - ai-ninja-network
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai-ninja-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=redis:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - ai-ninja-network
    depends_on:
      - redis
    restart: unless-stopped

# ===========================================
# Networks and Volumes
# ===========================================

networks:
  ai-ninja-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local