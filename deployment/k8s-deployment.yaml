# Kubernetes部署配置
# 并行执行任务1: 基础设施部署

apiVersion: v1
kind: Namespace
metadata:
  name: ai-answer-ninja-prod
  labels:
    name: ai-answer-ninja-prod
    env: production

---
# Redis缓存部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cache
  namespace: ai-answer-ninja-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-cache
  template:
    metadata:
      labels:
        app: redis-cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --maxmemory
        - 256mb
        - --maxmemory-policy
        - allkeys-lru
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi" 
            cpu: "200m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-cache-service
  namespace: ai-answer-ninja-prod
spec:
  selector:
    app: redis-cache
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# PostgreSQL数据库部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql-db
  namespace: ai-answer-ninja-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql-db
  template:
    metadata:
      labels:
        app: postgresql-db
    spec:
      containers:
      - name: postgresql
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "ai_answer_ninja"
        - name: POSTGRES_USER
          value: "ai_ninja_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-password
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8 --lc-collate=zh_CN.UTF-8 --lc-ctype=zh_CN.UTF-8"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: database-init-scripts

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: ai-answer-ninja-prod
spec:
  selector:
    app: postgresql-db
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# 数据库初始化脚本ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-init-scripts
  namespace: ai-answer-ninja-prod
data:
  01-init.sql: |
    -- 创建数据库用户和权限
    CREATE USER ai_ninja_app WITH PASSWORD 'app_password_here';
    GRANT CONNECT ON DATABASE ai_answer_ninja TO ai_ninja_app;
    GRANT USAGE ON SCHEMA public TO ai_ninja_app;
    GRANT CREATE ON SCHEMA public TO ai_ninja_app;
    
    -- 启用必要扩展
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";

---
# 数据库密钥
apiVersion: v1
kind: Secret
metadata:
  name: database-secrets
  namespace: ai-answer-ninja-prod
type: Opaque
data:
  postgres-password: "YWlfc3VwZXJfc2VjcmV0X3Bhc3N3b3Jk"  # ai_super_secret_password
  app-password: "YXBwX3Bhc3N3b3JkX2hlcmU="           # app_password_here

---
# 持久化存储声明
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: ai-answer-ninja-prod
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# 用户管理服务部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-management-service
  namespace: ai-answer-ninja-prod
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-management-service
  template:
    metadata:
      labels:
        app: user-management-service
    spec:
      containers:
      - name: user-management
        image: ai-ninja/user-management:latest
        ports:
        - containerPort: 3005
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3005"
        - name: DATABASE_URL
          value: "postgresql://ai_ninja_app:app_password_here@postgresql-service:5432/ai_answer_ninja"
        - name: REDIS_URL
          value: "redis://redis-cache-service:6379"
        envFrom:
        - configMapRef:
            name: azure-services-config
        - secretRef:
            name: azure-services-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "150m"
          limits:
            memory: "512Mi"
            cpu: "300m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3005
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3005
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: user-management-service
  namespace: ai-answer-ninja-prod
spec:
  selector:
    app: user-management-service
  ports:
  - port: 3005
    targetPort: 3005
  type: ClusterIP

---
# 实时处理服务部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: realtime-processor-service
  namespace: ai-answer-ninja-prod
spec:
  replicas: 3
  selector:
    matchLabels:
      app: realtime-processor-service
  template:
    metadata:
      labels:
        app: realtime-processor-service
    spec:
      containers:
      - name: realtime-processor
        image: ai-ninja/realtime-processor:latest
        ports:
        - containerPort: 3002
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3002"
        - name: REDIS_URL
          value: "redis://redis-cache-service:6379"
        envFrom:
        - configMapRef:
            name: azure-services-config
        - secretRef:
            name: azure-services-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "600m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 30
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: realtime-processor-service
  namespace: ai-answer-ninja-prod
spec:
  selector:
    app: realtime-processor-service
  ports:
  - port: 3002
    targetPort: 3002
  type: ClusterIP

---
# 负载均衡器
apiVersion: v1
kind: Service
metadata:
  name: ai-ninja-loadbalancer
  namespace: ai-answer-ninja-prod
spec:
  type: LoadBalancer
  selector:
    app: realtime-processor-service
  ports:
  - name: http
    port: 80
    targetPort: 3002
  - name: websocket
    port: 8080
    targetPort: 3002